// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

enum MetadataVisibility {
  PUBLIC // Visible to everyone
  INTERNAL // Visible to event volunteers
  ADMIN // Visible only to regional manager (and employees)
}

model EventGroup {
  // Metadata
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata           Json?
  // Data
  name               String
  startDate          DateTime
  endDate            DateTime
  ticketPrice        Float
  earlyBirdPrice     Float
  earlyBirdCutoff    DateTime
  registrationCutoff DateTime
  showcaseId         String?

  // Relations
  events     Event[]
  schedule   ScheduleItem[]
  promoCodes PromoCode[]
}

model Event {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?

  // Data
  name               String
  startDate          DateTime
  endDate            DateTime
  ticketPrice        Float
  earlyBirdPrice     Float
  earlyBirdCutoff    DateTime
  registrationCutoff DateTime
  managers           String[] // codeday account usernames
  registrationsOpen  Boolean             @default(false)
  contentfulWebname  String?
  showcaseId         String?
  eventRestrictions  EventRestriction[]
  timezone           String?
  majorityAge        Int                 @default(18)
  minAge             Int?
  maxAge             Int?
  requiresPromoCode  Boolean             @default(false)
  // Relations
  eventGroup         EventGroup          @relation(fields: [eventGroupId], references: [id])
  eventGroupId       String
  venue              Venue?              @relation(fields: [venueId], references: [id])
  venueId            String?
  sponsors           Sponsor[]
  tickets            Ticket[]
  schedule           ScheduleItem[]
  promoCodes         PromoCode[]
  interestedEmails   MailingListMember[]
}

model Venue {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?
  // Data
  name      String
  capacity  Int?

  // address is a legacy field kept in the schema for backwards-compatibility
  /// @TypeGraphQL.omit(output: true, input: true)
  address   String?

  addressLine1        String?
  addressLine2        String?
  addressLine3        String?
  city                String?
  state               String?
  stateAbbreviation   String?
  zipCode             String?
  country             String?
  countryAbbreviation String?
  mapLink             String?
  contactName         String?
  contactEmail        String?
  contactPhone        String?

  // Relations
  events Event[]
}

model Sponsor {
  // Metadata
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata         Json?
  // Data
  name             String
  link             String?
  logoImageUri     String?
  darkLogoImageUri String?
  description      String?
  perks            String?
  amount           Int      @default(0)
  contactName      String?
  contactEmail     String?
  contactPhone     String?

  // Relations
  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
}

model Person {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?

  // Data
  firstName String
  lastName  String
  email     String?
  phone     String?
  age       Int?
  username  String?
  pronouns  String?

  Ticket Ticket[]
}

enum TicketType {
  STUDENT
  TEACHER
  VIP
  MENTOR
  JUDGE
  STAFF
}

model Ticket {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?
  // Data
  firstName String
  lastName  String
  email     String?
  phone     String?
  age       Int?

  waiverSigned Boolean   @default(false)
  checkedIn    DateTime?
  checkedOut   DateTime?

  couponCode String?
  type       TicketType @default(STUDENT)
  promoCode  PromoCode? @relation(fields: [promoCodeId], references: [id])

  // Relations
  guardian Person? @relation(fields: [personId], references: [id])

  event       Event   @relation(fields: [eventId], references: [id])
  eventId     String
  personId    String?
  promoCodeId String?

  payment    Payment?        @relation(fields: [paymentId], references: [id])
  paymentId  String?
  sentEmails EmailTemplate[]
}

model Payment {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?

  // Data
  paymentProvider       String  @default("stripe")
  stripePaymentIntentId String
  complete              Boolean @default(false)

  tickets Ticket[]
}

model ScheduleItem {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?

  // Data
  type           String    @default("Event")
  name           String
  description    String?
  link           String?
  hostName       String?
  hostEmail      String?
  hostPronoun    String?
  organizerName  String?
  organizerEmail String?
  organizerPhone String?
  start          DateTime
  end            DateTime?
  finalized      Boolean   @default(false)
  internal       Boolean   @default(false)

  // Relations
  event        Event?      @relation(fields: [eventId], references: [id])
  eventId      String?
  eventGroup   EventGroup? @relation(fields: [eventGroupId], references: [id])
  eventGroupId String?
}

enum DiscountType {
  SUBTRACT
  PERCENT
}

model PromoCode {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?

  // Data
  code   String
  type   DiscountType
  amount Float
  uses   Int?

  eventGroup   EventGroup? @relation(fields: [eventGroupId], references: [id])
  eventGroupId String?
  event        Event?      @relation(fields: [eventId], references: [id])
  eventId      String?
  tickets      Ticket[]
}

model MailingListMember {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?

  // Data
  email              String    @unique
  interestedInEvents Event[]
  lastEmailed        DateTime?
}

enum EmailWhenFrom {
  REGISTER
  EVENTSTART
  EVENTEND
}

model EmailTemplate {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?

  // Data
  name            String
  automatic       Boolean       @default(false)
  fromName        String        @default("John Peter")
  fromEmail       String        @default("team@codeday.org")
  replyTo         String        @default("team@codeday.org")
  subject         String
  sendTo          TicketType
  when            String
  whenFrom        EmailWhenFrom
  sendLate        Boolean       @default(false)
  sendInWorkHours Boolean       @default(false)
  sendAfterEvent  Boolean       @default(false)
  sendParent      Boolean       @default(false)
  template        String
  marketing       Boolean       @default(false)
  extraFilters    Json?
  sendText        Boolean       @default(false)
  textMsg         String?
  sentTo          Ticket[]
}

model EventRestriction {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @TypeGraphQL.omit(output: true, input: ["update", "where", "orderBy"])
  metadata  Json?

  // Data
  name    String
  iconUri String?
  title   String
  details String?
  Events  Event[]
}
