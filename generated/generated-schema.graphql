# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateEmailTemplate {
  _count: EmailTemplateCountAggregate
  _max: EmailTemplateMaxAggregate
  _min: EmailTemplateMinAggregate
}

type AggregateEvent {
  _avg: EventAvgAggregate
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  _sum: EventSumAggregate
}

type AggregateEventGroup {
  _avg: EventGroupAvgAggregate
  _count: EventGroupCountAggregate
  _max: EventGroupMaxAggregate
  _min: EventGroupMinAggregate
  _sum: EventGroupSumAggregate
}

type AggregateEventRestriction {
  _count: EventRestrictionCountAggregate
  _max: EventRestrictionMaxAggregate
  _min: EventRestrictionMinAggregate
}

type AggregateMailingListMember {
  _count: MailingListMemberCountAggregate
  _max: MailingListMemberMaxAggregate
  _min: MailingListMemberMinAggregate
}

type AggregatePayment {
  _count: PaymentCountAggregate
  _max: PaymentMaxAggregate
  _min: PaymentMinAggregate
}

type AggregatePerson {
  _avg: PersonAvgAggregate
  _count: PersonCountAggregate
  _max: PersonMaxAggregate
  _min: PersonMinAggregate
  _sum: PersonSumAggregate
}

type AggregatePromoCode {
  _avg: PromoCodeAvgAggregate
  _count: PromoCodeCountAggregate
  _max: PromoCodeMaxAggregate
  _min: PromoCodeMinAggregate
  _sum: PromoCodeSumAggregate
}

type AggregateScheduleItem {
  _count: ScheduleItemCountAggregate
  _max: ScheduleItemMaxAggregate
  _min: ScheduleItemMinAggregate
}

type AggregateSponsor {
  _avg: SponsorAvgAggregate
  _count: SponsorCountAggregate
  _max: SponsorMaxAggregate
  _min: SponsorMinAggregate
  _sum: SponsorSumAggregate
}

type AggregateTicket {
  _avg: TicketAvgAggregate
  _count: TicketCountAggregate
  _max: TicketMaxAggregate
  _min: TicketMinAggregate
  _sum: TicketSumAggregate
}

type AggregateVenue {
  _avg: VenueAvgAggregate
  _count: VenueCountAggregate
  _max: VenueMaxAggregate
  _min: VenueMinAggregate
  _sum: VenueSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

enum DiscountType {
  PERCENT
  SUBTRACT
}

type EmailTemplate {
  _count: EmailTemplateCount
  automatic: Boolean!
  createdAt: DateTime!
  extraFilters: JSON
  fromEmail: String!
  fromName: String!
  getMetadata(key: String!): String
  id: String!
  marketing: Boolean!
  name: String!
  previewEmailBody: String!
  replyTo: String!
  sendAfterEvent: Boolean!
  sendInWorkHours: Boolean!
  sendLate: Boolean!
  sendParent: Boolean!
  sendText: Boolean!
  sendTo: TicketType!
  sentTo(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): [Ticket!]!
  subject: String!
  template: String!
  textMsg: String
  updatedAt: DateTime!
  when: String!
  whenFrom: EmailWhenFrom!
}

type EmailTemplateCount {
  sentTo: Int!
}

type EmailTemplateCountAggregate {
  _all: Int!
  automatic: Int!
  createdAt: Int!
  extraFilters: Int!
  fromEmail: Int!
  fromName: Int!
  id: Int!
  marketing: Int!
  metadata: Int!
  name: Int!
  replyTo: Int!
  sendAfterEvent: Int!
  sendInWorkHours: Int!
  sendLate: Int!
  sendParent: Int!
  sendText: Int!
  sendTo: Int!
  subject: Int!
  template: Int!
  textMsg: Int!
  updatedAt: Int!
  when: Int!
  whenFrom: Int!
}

input EmailTemplateCountOrderByAggregateInput {
  automatic: SortOrder
  createdAt: SortOrder
  extraFilters: SortOrder
  fromEmail: SortOrder
  fromName: SortOrder
  id: SortOrder
  marketing: SortOrder
  metadata: SortOrder
  name: SortOrder
  replyTo: SortOrder
  sendAfterEvent: SortOrder
  sendInWorkHours: SortOrder
  sendLate: SortOrder
  sendParent: SortOrder
  sendText: SortOrder
  sendTo: SortOrder
  subject: SortOrder
  template: SortOrder
  textMsg: SortOrder
  updatedAt: SortOrder
  when: SortOrder
  whenFrom: SortOrder
}

input EmailTemplateCreateInput {
  automatic: Boolean
  createdAt: DateTime
  extraFilters: JSON
  fromEmail: String
  fromName: String
  id: String
  marketing: Boolean
  metadata: JSON
  name: String!
  replyTo: String
  sendAfterEvent: Boolean
  sendInWorkHours: Boolean
  sendLate: Boolean
  sendParent: Boolean
  sendText: Boolean
  sendTo: TicketType!
  sentTo: TicketCreateNestedManyWithoutSentEmailsInput
  subject: String!
  template: String!
  textMsg: String
  updatedAt: DateTime
  when: String!
  whenFrom: EmailWhenFrom!
}

input EmailTemplateCreateManyInput {
  automatic: Boolean
  createdAt: DateTime
  extraFilters: JSON
  fromEmail: String
  fromName: String
  id: String
  marketing: Boolean
  metadata: JSON
  name: String!
  replyTo: String
  sendAfterEvent: Boolean
  sendInWorkHours: Boolean
  sendLate: Boolean
  sendParent: Boolean
  sendText: Boolean
  sendTo: TicketType!
  subject: String!
  template: String!
  textMsg: String
  updatedAt: DateTime
  when: String!
  whenFrom: EmailWhenFrom!
}

input EmailTemplateCreateNestedManyWithoutSentToInput {
  connect: [EmailTemplateWhereUniqueInput!]
  connectOrCreate: [EmailTemplateCreateOrConnectWithoutSentToInput!]
  create: [EmailTemplateCreateWithoutSentToInput!]
}

input EmailTemplateCreateOrConnectWithoutSentToInput {
  create: EmailTemplateCreateWithoutSentToInput!
  where: EmailTemplateWhereUniqueInput!
}

input EmailTemplateCreateWithoutSentToInput {
  automatic: Boolean
  createdAt: DateTime
  extraFilters: JSON
  fromEmail: String
  fromName: String
  id: String
  marketing: Boolean
  metadata: JSON
  name: String!
  replyTo: String
  sendAfterEvent: Boolean
  sendInWorkHours: Boolean
  sendLate: Boolean
  sendParent: Boolean
  sendText: Boolean
  sendTo: TicketType!
  subject: String!
  template: String!
  textMsg: String
  updatedAt: DateTime
  when: String!
  whenFrom: EmailWhenFrom!
}

type EmailTemplateGroupBy {
  _count: EmailTemplateCountAggregate
  _max: EmailTemplateMaxAggregate
  _min: EmailTemplateMinAggregate
  automatic: Boolean!
  createdAt: DateTime!
  extraFilters: JSON
  fromEmail: String!
  fromName: String!
  id: String!
  marketing: Boolean!
  metadata: JSON
  name: String!
  replyTo: String!
  sendAfterEvent: Boolean!
  sendInWorkHours: Boolean!
  sendLate: Boolean!
  sendParent: Boolean!
  sendText: Boolean!
  sendTo: TicketType!
  subject: String!
  template: String!
  textMsg: String
  updatedAt: DateTime!
  when: String!
  whenFrom: EmailWhenFrom!
}

input EmailTemplateListRelationFilter {
  every: EmailTemplateWhereInput
  none: EmailTemplateWhereInput
  some: EmailTemplateWhereInput
}

type EmailTemplateMaxAggregate {
  automatic: Boolean
  createdAt: DateTime
  fromEmail: String
  fromName: String
  id: String
  marketing: Boolean
  name: String
  replyTo: String
  sendAfterEvent: Boolean
  sendInWorkHours: Boolean
  sendLate: Boolean
  sendParent: Boolean
  sendText: Boolean
  sendTo: TicketType
  subject: String
  template: String
  textMsg: String
  updatedAt: DateTime
  when: String
  whenFrom: EmailWhenFrom
}

input EmailTemplateMaxOrderByAggregateInput {
  automatic: SortOrder
  createdAt: SortOrder
  fromEmail: SortOrder
  fromName: SortOrder
  id: SortOrder
  marketing: SortOrder
  name: SortOrder
  replyTo: SortOrder
  sendAfterEvent: SortOrder
  sendInWorkHours: SortOrder
  sendLate: SortOrder
  sendParent: SortOrder
  sendText: SortOrder
  sendTo: SortOrder
  subject: SortOrder
  template: SortOrder
  textMsg: SortOrder
  updatedAt: SortOrder
  when: SortOrder
  whenFrom: SortOrder
}

type EmailTemplateMinAggregate {
  automatic: Boolean
  createdAt: DateTime
  fromEmail: String
  fromName: String
  id: String
  marketing: Boolean
  name: String
  replyTo: String
  sendAfterEvent: Boolean
  sendInWorkHours: Boolean
  sendLate: Boolean
  sendParent: Boolean
  sendText: Boolean
  sendTo: TicketType
  subject: String
  template: String
  textMsg: String
  updatedAt: DateTime
  when: String
  whenFrom: EmailWhenFrom
}

input EmailTemplateMinOrderByAggregateInput {
  automatic: SortOrder
  createdAt: SortOrder
  fromEmail: SortOrder
  fromName: SortOrder
  id: SortOrder
  marketing: SortOrder
  name: SortOrder
  replyTo: SortOrder
  sendAfterEvent: SortOrder
  sendInWorkHours: SortOrder
  sendLate: SortOrder
  sendParent: SortOrder
  sendText: SortOrder
  sendTo: SortOrder
  subject: SortOrder
  template: SortOrder
  textMsg: SortOrder
  updatedAt: SortOrder
  when: SortOrder
  whenFrom: SortOrder
}

input EmailTemplateOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmailTemplateOrderByWithAggregationInput {
  _count: EmailTemplateCountOrderByAggregateInput
  _max: EmailTemplateMaxOrderByAggregateInput
  _min: EmailTemplateMinOrderByAggregateInput
  automatic: SortOrder
  createdAt: SortOrder
  extraFilters: SortOrder
  fromEmail: SortOrder
  fromName: SortOrder
  id: SortOrder
  marketing: SortOrder
  metadata: SortOrder
  name: SortOrder
  replyTo: SortOrder
  sendAfterEvent: SortOrder
  sendInWorkHours: SortOrder
  sendLate: SortOrder
  sendParent: SortOrder
  sendText: SortOrder
  sendTo: SortOrder
  subject: SortOrder
  template: SortOrder
  textMsg: SortOrder
  updatedAt: SortOrder
  when: SortOrder
  whenFrom: SortOrder
}

input EmailTemplateOrderByWithRelationInput {
  automatic: SortOrder
  createdAt: SortOrder
  extraFilters: SortOrder
  fromEmail: SortOrder
  fromName: SortOrder
  id: SortOrder
  marketing: SortOrder
  metadata: SortOrder
  name: SortOrder
  replyTo: SortOrder
  sendAfterEvent: SortOrder
  sendInWorkHours: SortOrder
  sendLate: SortOrder
  sendParent: SortOrder
  sendText: SortOrder
  sendTo: SortOrder
  sentTo: TicketOrderByRelationAggregateInput
  subject: SortOrder
  template: SortOrder
  textMsg: SortOrder
  updatedAt: SortOrder
  when: SortOrder
  whenFrom: SortOrder
}

enum EmailTemplateScalarFieldEnum {
  automatic
  createdAt
  extraFilters
  fromEmail
  fromName
  id
  marketing
  metadata
  name
  replyTo
  sendAfterEvent
  sendInWorkHours
  sendLate
  sendParent
  sendText
  sendTo
  subject
  template
  textMsg
  updatedAt
  when
  whenFrom
}

input EmailTemplateScalarWhereInput {
  AND: [EmailTemplateScalarWhereInput!]
  NOT: [EmailTemplateScalarWhereInput!]
  OR: [EmailTemplateScalarWhereInput!]
  automatic: BoolFilter
  createdAt: DateTimeFilter
  extraFilters: JsonNullableFilter
  fromEmail: StringFilter
  fromName: StringFilter
  id: StringFilter
  marketing: BoolFilter
  metadata: JsonNullableFilter
  name: StringFilter
  replyTo: StringFilter
  sendAfterEvent: BoolFilter
  sendInWorkHours: BoolFilter
  sendLate: BoolFilter
  sendParent: BoolFilter
  sendText: BoolFilter
  sendTo: EnumTicketTypeFilter
  subject: StringFilter
  template: StringFilter
  textMsg: StringNullableFilter
  updatedAt: DateTimeFilter
  when: StringFilter
  whenFrom: EnumEmailWhenFromFilter
}

input EmailTemplateScalarWhereWithAggregatesInput {
  AND: [EmailTemplateScalarWhereWithAggregatesInput!]
  NOT: [EmailTemplateScalarWhereWithAggregatesInput!]
  OR: [EmailTemplateScalarWhereWithAggregatesInput!]
  automatic: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  extraFilters: JsonNullableWithAggregatesFilter
  fromEmail: StringWithAggregatesFilter
  fromName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  marketing: BoolWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  replyTo: StringWithAggregatesFilter
  sendAfterEvent: BoolWithAggregatesFilter
  sendInWorkHours: BoolWithAggregatesFilter
  sendLate: BoolWithAggregatesFilter
  sendParent: BoolWithAggregatesFilter
  sendText: BoolWithAggregatesFilter
  sendTo: EnumTicketTypeWithAggregatesFilter
  subject: StringWithAggregatesFilter
  template: StringWithAggregatesFilter
  textMsg: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  when: StringWithAggregatesFilter
  whenFrom: EnumEmailWhenFromWithAggregatesFilter
}

input EmailTemplateUpdateInput {
  automatic: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  extraFilters: JSON
  fromEmail: StringFieldUpdateOperationsInput
  fromName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  marketing: BoolFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  replyTo: StringFieldUpdateOperationsInput
  sendAfterEvent: BoolFieldUpdateOperationsInput
  sendInWorkHours: BoolFieldUpdateOperationsInput
  sendLate: BoolFieldUpdateOperationsInput
  sendParent: BoolFieldUpdateOperationsInput
  sendText: BoolFieldUpdateOperationsInput
  sendTo: EnumTicketTypeFieldUpdateOperationsInput
  sentTo: TicketUpdateManyWithoutSentEmailsInput
  subject: StringFieldUpdateOperationsInput
  template: StringFieldUpdateOperationsInput
  textMsg: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  when: StringFieldUpdateOperationsInput
  whenFrom: EnumEmailWhenFromFieldUpdateOperationsInput
}

input EmailTemplateUpdateManyMutationInput {
  automatic: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  extraFilters: JSON
  fromEmail: StringFieldUpdateOperationsInput
  fromName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  marketing: BoolFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  replyTo: StringFieldUpdateOperationsInput
  sendAfterEvent: BoolFieldUpdateOperationsInput
  sendInWorkHours: BoolFieldUpdateOperationsInput
  sendLate: BoolFieldUpdateOperationsInput
  sendParent: BoolFieldUpdateOperationsInput
  sendText: BoolFieldUpdateOperationsInput
  sendTo: EnumTicketTypeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  template: StringFieldUpdateOperationsInput
  textMsg: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  when: StringFieldUpdateOperationsInput
  whenFrom: EnumEmailWhenFromFieldUpdateOperationsInput
}

input EmailTemplateUpdateManyWithWhereWithoutSentToInput {
  data: EmailTemplateUpdateManyMutationInput!
  where: EmailTemplateScalarWhereInput!
}

input EmailTemplateUpdateManyWithoutSentToInput {
  connect: [EmailTemplateWhereUniqueInput!]
  connectOrCreate: [EmailTemplateCreateOrConnectWithoutSentToInput!]
  create: [EmailTemplateCreateWithoutSentToInput!]
  delete: [EmailTemplateWhereUniqueInput!]
  deleteMany: [EmailTemplateScalarWhereInput!]
  disconnect: [EmailTemplateWhereUniqueInput!]
  set: [EmailTemplateWhereUniqueInput!]
  update: [EmailTemplateUpdateWithWhereUniqueWithoutSentToInput!]
  updateMany: [EmailTemplateUpdateManyWithWhereWithoutSentToInput!]
  upsert: [EmailTemplateUpsertWithWhereUniqueWithoutSentToInput!]
}

input EmailTemplateUpdateWithWhereUniqueWithoutSentToInput {
  data: EmailTemplateUpdateWithoutSentToInput!
  where: EmailTemplateWhereUniqueInput!
}

input EmailTemplateUpdateWithoutSentToInput {
  automatic: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  extraFilters: JSON
  fromEmail: StringFieldUpdateOperationsInput
  fromName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  marketing: BoolFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  replyTo: StringFieldUpdateOperationsInput
  sendAfterEvent: BoolFieldUpdateOperationsInput
  sendInWorkHours: BoolFieldUpdateOperationsInput
  sendLate: BoolFieldUpdateOperationsInput
  sendParent: BoolFieldUpdateOperationsInput
  sendText: BoolFieldUpdateOperationsInput
  sendTo: EnumTicketTypeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  template: StringFieldUpdateOperationsInput
  textMsg: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  when: StringFieldUpdateOperationsInput
  whenFrom: EnumEmailWhenFromFieldUpdateOperationsInput
}

input EmailTemplateUpsertWithWhereUniqueWithoutSentToInput {
  create: EmailTemplateCreateWithoutSentToInput!
  update: EmailTemplateUpdateWithoutSentToInput!
  where: EmailTemplateWhereUniqueInput!
}

input EmailTemplateWhereInput {
  AND: [EmailTemplateWhereInput!]
  NOT: [EmailTemplateWhereInput!]
  OR: [EmailTemplateWhereInput!]
  automatic: BoolFilter
  createdAt: DateTimeFilter
  extraFilters: JsonNullableFilter
  fromEmail: StringFilter
  fromName: StringFilter
  id: StringFilter
  marketing: BoolFilter
  metadata: JsonNullableFilter
  name: StringFilter
  replyTo: StringFilter
  sendAfterEvent: BoolFilter
  sendInWorkHours: BoolFilter
  sendLate: BoolFilter
  sendParent: BoolFilter
  sendText: BoolFilter
  sendTo: EnumTicketTypeFilter
  sentTo: TicketListRelationFilter
  subject: StringFilter
  template: StringFilter
  textMsg: StringNullableFilter
  updatedAt: DateTimeFilter
  when: StringFilter
  whenFrom: EnumEmailWhenFromFilter
}

input EmailTemplateWhereUniqueInput {
  id: String
}

enum EmailWhenFrom {
  EVENTEND
  EVENTSTART
  REGISTER
}

input EnumDiscountTypeFieldUpdateOperationsInput {
  set: DiscountType
}

input EnumDiscountTypeFilter {
  equals: DiscountType
  in: [DiscountType!]
  not: NestedEnumDiscountTypeFilter
  notIn: [DiscountType!]
}

input EnumDiscountTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumDiscountTypeFilter
  _min: NestedEnumDiscountTypeFilter
  equals: DiscountType
  in: [DiscountType!]
  not: NestedEnumDiscountTypeWithAggregatesFilter
  notIn: [DiscountType!]
}

input EnumEmailWhenFromFieldUpdateOperationsInput {
  set: EmailWhenFrom
}

input EnumEmailWhenFromFilter {
  equals: EmailWhenFrom
  in: [EmailWhenFrom!]
  not: NestedEnumEmailWhenFromFilter
  notIn: [EmailWhenFrom!]
}

input EnumEmailWhenFromWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumEmailWhenFromFilter
  _min: NestedEnumEmailWhenFromFilter
  equals: EmailWhenFrom
  in: [EmailWhenFrom!]
  not: NestedEnumEmailWhenFromWithAggregatesFilter
  notIn: [EmailWhenFrom!]
}

input EnumTicketTypeFieldUpdateOperationsInput {
  set: TicketType
}

input EnumTicketTypeFilter {
  equals: TicketType
  in: [TicketType!]
  not: NestedEnumTicketTypeFilter
  notIn: [TicketType!]
}

input EnumTicketTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTicketTypeFilter
  _min: NestedEnumTicketTypeFilter
  equals: TicketType
  in: [TicketType!]
  not: NestedEnumTicketTypeWithAggregatesFilter
  notIn: [TicketType!]
}

type Event {
  _count: EventCount
  activeTicketPrice: Float
  canEarlyBirdRegister: Boolean!
  canRegister: Boolean!
  checkPromoCode(code: String!): JSONObject!
  contentfulWebname: String
  createdAt: DateTime!
  displayDate: String!
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroup!
  eventGroupId: String!
  eventRestrictions(cursor: EventRestrictionWhereUniqueInput, distinct: [EventRestrictionScalarFieldEnum!], orderBy: [EventRestrictionOrderByWithRelationInput!], skip: Int, take: Int, where: EventRestrictionWhereInput): [EventRestriction!]!
  getMetadata(key: String!): String
  id: String!
  interestedEmails(cursor: MailingListMemberWhereUniqueInput, distinct: [MailingListMemberScalarFieldEnum!], orderBy: [MailingListMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MailingListMemberWhereInput): [MailingListMember!]!
  majorityAge: Int!
  managers: [String!]!
  maxAge: Float!
  minAge: Float!
  name: String!
  promoCodes(cursor: PromoCodeWhereUniqueInput, distinct: [PromoCodeScalarFieldEnum!], orderBy: [PromoCodeOrderByWithRelationInput!], skip: Int, take: Int, where: PromoCodeWhereInput): [PromoCode!]!
  registrationCutoff: DateTime!
  registrationsOpen: Boolean!
  remainingTickets: Float
  schedule(cursor: ScheduleItemWhereUniqueInput, distinct: [ScheduleItemScalarFieldEnum!], orderBy: [ScheduleItemOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleItemWhereInput): [ScheduleItem!]!
  showcaseId: String
  soldTickets(onlyStudents: Boolean = false): Float!
  sponsors(cursor: SponsorWhereUniqueInput, distinct: [SponsorScalarFieldEnum!], orderBy: [SponsorOrderByWithRelationInput!], skip: Int, take: Int, where: SponsorWhereInput): [Sponsor!]!
  startDate: DateTime!
  ticketPrice: Float!
  tickets(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): [Ticket!]!
  timezone: String
  updatedAt: DateTime!
  venue: Venue
  venueId: String
}

type EventAvgAggregate {
  earlyBirdPrice: Float
  majorityAge: Float
  ticketPrice: Float
}

input EventAvgOrderByAggregateInput {
  earlyBirdPrice: SortOrder
  majorityAge: SortOrder
  ticketPrice: SortOrder
}

type EventCount {
  eventRestrictions: Int!
  interestedEmails: Int!
  promoCodes: Int!
  schedule: Int!
  sponsors: Int!
  tickets: Int!
}

type EventCountAggregate {
  _all: Int!
  contentfulWebname: Int!
  createdAt: Int!
  earlyBirdCutoff: Int!
  earlyBirdPrice: Int!
  endDate: Int!
  eventGroupId: Int!
  id: Int!
  majorityAge: Int!
  managers: Int!
  metadata: Int!
  name: Int!
  registrationCutoff: Int!
  registrationsOpen: Int!
  showcaseId: Int!
  startDate: Int!
  ticketPrice: Int!
  timezone: Int!
  updatedAt: Int!
  venueId: Int!
}

input EventCountOrderByAggregateInput {
  contentfulWebname: SortOrder
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  eventGroupId: SortOrder
  id: SortOrder
  majorityAge: SortOrder
  managers: SortOrder
  metadata: SortOrder
  name: SortOrder
  registrationCutoff: SortOrder
  registrationsOpen: SortOrder
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input EventCreateInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroupCreateNestedOneWithoutEventsInput!
  eventRestrictions: EventRestrictionCreateNestedManyWithoutEventsInput
  id: String
  interestedEmails: MailingListMemberCreateNestedManyWithoutInterestedInEventsInput
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventInput
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  schedule: ScheduleItemCreateNestedManyWithoutEventInput
  showcaseId: String
  sponsors: SponsorCreateNestedManyWithoutEventInput
  startDate: DateTime!
  ticketPrice: Float!
  tickets: TicketCreateNestedManyWithoutEventInput
  timezone: String
  updatedAt: DateTime
  venue: VenueCreateNestedOneWithoutEventsInput
}

input EventCreateManyEventGroupInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  id: String
  majorityAge: Int
  managers: EventCreateManymanagersInput
  metadata: JSON
  name: String!
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  timezone: String
  updatedAt: DateTime
  venueId: String
}

input EventCreateManyEventGroupInputEnvelope {
  data: [EventCreateManyEventGroupInput!]!
  skipDuplicates: Boolean
}

input EventCreateManyInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroupId: String!
  id: String
  majorityAge: Int
  managers: EventCreateManymanagersInput
  metadata: JSON
  name: String!
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  timezone: String
  updatedAt: DateTime
  venueId: String
}

input EventCreateManyVenueInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroupId: String!
  id: String
  majorityAge: Int
  managers: EventCreateManymanagersInput
  metadata: JSON
  name: String!
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  timezone: String
  updatedAt: DateTime
}

input EventCreateManyVenueInputEnvelope {
  data: [EventCreateManyVenueInput!]!
  skipDuplicates: Boolean
}

input EventCreateManymanagersInput {
  set: [String!]!
}

input EventCreateNestedManyWithoutEventGroupInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutEventGroupInput!]
  create: [EventCreateWithoutEventGroupInput!]
  createMany: EventCreateManyEventGroupInputEnvelope
}

input EventCreateNestedManyWithoutEventRestrictionsInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutEventRestrictionsInput!]
  create: [EventCreateWithoutEventRestrictionsInput!]
}

input EventCreateNestedManyWithoutInterestedEmailsInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutInterestedEmailsInput!]
  create: [EventCreateWithoutInterestedEmailsInput!]
}

input EventCreateNestedManyWithoutVenueInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutVenueInput!]
  create: [EventCreateWithoutVenueInput!]
  createMany: EventCreateManyVenueInputEnvelope
}

input EventCreateNestedOneWithoutPromoCodesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutPromoCodesInput
  create: EventCreateWithoutPromoCodesInput
}

input EventCreateNestedOneWithoutScheduleInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutScheduleInput
  create: EventCreateWithoutScheduleInput
}

input EventCreateNestedOneWithoutSponsorsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutSponsorsInput
  create: EventCreateWithoutSponsorsInput
}

input EventCreateNestedOneWithoutTicketsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutTicketsInput
  create: EventCreateWithoutTicketsInput
}

input EventCreateOrConnectWithoutEventGroupInput {
  create: EventCreateWithoutEventGroupInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutEventRestrictionsInput {
  create: EventCreateWithoutEventRestrictionsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutInterestedEmailsInput {
  create: EventCreateWithoutInterestedEmailsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutPromoCodesInput {
  create: EventCreateWithoutPromoCodesInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutScheduleInput {
  create: EventCreateWithoutScheduleInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutSponsorsInput {
  create: EventCreateWithoutSponsorsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutTicketsInput {
  create: EventCreateWithoutTicketsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutVenueInput {
  create: EventCreateWithoutVenueInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutEventGroupInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventRestrictions: EventRestrictionCreateNestedManyWithoutEventsInput
  id: String
  interestedEmails: MailingListMemberCreateNestedManyWithoutInterestedInEventsInput
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventInput
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  schedule: ScheduleItemCreateNestedManyWithoutEventInput
  showcaseId: String
  sponsors: SponsorCreateNestedManyWithoutEventInput
  startDate: DateTime!
  ticketPrice: Float!
  tickets: TicketCreateNestedManyWithoutEventInput
  timezone: String
  updatedAt: DateTime
  venue: VenueCreateNestedOneWithoutEventsInput
}

input EventCreateWithoutEventRestrictionsInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroupCreateNestedOneWithoutEventsInput!
  id: String
  interestedEmails: MailingListMemberCreateNestedManyWithoutInterestedInEventsInput
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventInput
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  schedule: ScheduleItemCreateNestedManyWithoutEventInput
  showcaseId: String
  sponsors: SponsorCreateNestedManyWithoutEventInput
  startDate: DateTime!
  ticketPrice: Float!
  tickets: TicketCreateNestedManyWithoutEventInput
  timezone: String
  updatedAt: DateTime
  venue: VenueCreateNestedOneWithoutEventsInput
}

input EventCreateWithoutInterestedEmailsInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroupCreateNestedOneWithoutEventsInput!
  eventRestrictions: EventRestrictionCreateNestedManyWithoutEventsInput
  id: String
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventInput
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  schedule: ScheduleItemCreateNestedManyWithoutEventInput
  showcaseId: String
  sponsors: SponsorCreateNestedManyWithoutEventInput
  startDate: DateTime!
  ticketPrice: Float!
  tickets: TicketCreateNestedManyWithoutEventInput
  timezone: String
  updatedAt: DateTime
  venue: VenueCreateNestedOneWithoutEventsInput
}

input EventCreateWithoutPromoCodesInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroupCreateNestedOneWithoutEventsInput!
  eventRestrictions: EventRestrictionCreateNestedManyWithoutEventsInput
  id: String
  interestedEmails: MailingListMemberCreateNestedManyWithoutInterestedInEventsInput
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  schedule: ScheduleItemCreateNestedManyWithoutEventInput
  showcaseId: String
  sponsors: SponsorCreateNestedManyWithoutEventInput
  startDate: DateTime!
  ticketPrice: Float!
  tickets: TicketCreateNestedManyWithoutEventInput
  timezone: String
  updatedAt: DateTime
  venue: VenueCreateNestedOneWithoutEventsInput
}

input EventCreateWithoutScheduleInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroupCreateNestedOneWithoutEventsInput!
  eventRestrictions: EventRestrictionCreateNestedManyWithoutEventsInput
  id: String
  interestedEmails: MailingListMemberCreateNestedManyWithoutInterestedInEventsInput
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventInput
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  showcaseId: String
  sponsors: SponsorCreateNestedManyWithoutEventInput
  startDate: DateTime!
  ticketPrice: Float!
  tickets: TicketCreateNestedManyWithoutEventInput
  timezone: String
  updatedAt: DateTime
  venue: VenueCreateNestedOneWithoutEventsInput
}

input EventCreateWithoutSponsorsInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroupCreateNestedOneWithoutEventsInput!
  eventRestrictions: EventRestrictionCreateNestedManyWithoutEventsInput
  id: String
  interestedEmails: MailingListMemberCreateNestedManyWithoutInterestedInEventsInput
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventInput
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  schedule: ScheduleItemCreateNestedManyWithoutEventInput
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  tickets: TicketCreateNestedManyWithoutEventInput
  timezone: String
  updatedAt: DateTime
  venue: VenueCreateNestedOneWithoutEventsInput
}

input EventCreateWithoutTicketsInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroupCreateNestedOneWithoutEventsInput!
  eventRestrictions: EventRestrictionCreateNestedManyWithoutEventsInput
  id: String
  interestedEmails: MailingListMemberCreateNestedManyWithoutInterestedInEventsInput
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventInput
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  schedule: ScheduleItemCreateNestedManyWithoutEventInput
  showcaseId: String
  sponsors: SponsorCreateNestedManyWithoutEventInput
  startDate: DateTime!
  ticketPrice: Float!
  timezone: String
  updatedAt: DateTime
  venue: VenueCreateNestedOneWithoutEventsInput
}

input EventCreateWithoutVenueInput {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroup: EventGroupCreateNestedOneWithoutEventsInput!
  eventRestrictions: EventRestrictionCreateNestedManyWithoutEventsInput
  id: String
  interestedEmails: MailingListMemberCreateNestedManyWithoutInterestedInEventsInput
  majorityAge: Int
  managers: EventCreatemanagersInput
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventInput
  registrationCutoff: DateTime!
  registrationsOpen: Boolean
  schedule: ScheduleItemCreateNestedManyWithoutEventInput
  showcaseId: String
  sponsors: SponsorCreateNestedManyWithoutEventInput
  startDate: DateTime!
  ticketPrice: Float!
  tickets: TicketCreateNestedManyWithoutEventInput
  timezone: String
  updatedAt: DateTime
}

input EventCreatemanagersInput {
  set: [String!]!
}

type EventGroup {
  _count: EventGroupCount
  createdAt: DateTime!
  displayDate: String!
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  getMetadata(key: String!): String
  id: String!
  name: String!
  promoCodes(cursor: PromoCodeWhereUniqueInput, distinct: [PromoCodeScalarFieldEnum!], orderBy: [PromoCodeOrderByWithRelationInput!], skip: Int, take: Int, where: PromoCodeWhereInput): [PromoCode!]!
  registrationCutoff: DateTime!
  schedule(cursor: ScheduleItemWhereUniqueInput, distinct: [ScheduleItemScalarFieldEnum!], orderBy: [ScheduleItemOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleItemWhereInput): [ScheduleItem!]!
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  updatedAt: DateTime!
}

type EventGroupAvgAggregate {
  earlyBirdPrice: Float
  ticketPrice: Float
}

input EventGroupAvgOrderByAggregateInput {
  earlyBirdPrice: SortOrder
  ticketPrice: SortOrder
}

type EventGroupBy {
  _avg: EventAvgAggregate
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  _sum: EventSumAggregate
  contentfulWebname: String
  createdAt: DateTime!
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  eventGroupId: String!
  id: String!
  majorityAge: Int!
  managers: [String!]
  metadata: JSON
  name: String!
  registrationCutoff: DateTime!
  registrationsOpen: Boolean!
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  timezone: String
  updatedAt: DateTime!
  venueId: String
}

type EventGroupCount {
  events: Int!
  promoCodes: Int!
  schedule: Int!
}

type EventGroupCountAggregate {
  _all: Int!
  createdAt: Int!
  earlyBirdCutoff: Int!
  earlyBirdPrice: Int!
  endDate: Int!
  id: Int!
  metadata: Int!
  name: Int!
  registrationCutoff: Int!
  showcaseId: Int!
  startDate: Int!
  ticketPrice: Int!
  updatedAt: Int!
}

input EventGroupCountOrderByAggregateInput {
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  id: SortOrder
  metadata: SortOrder
  name: SortOrder
  registrationCutoff: SortOrder
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  updatedAt: SortOrder
}

input EventGroupCreateInput {
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  events: EventCreateNestedManyWithoutEventGroupInput
  id: String
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventGroupInput
  registrationCutoff: DateTime!
  schedule: ScheduleItemCreateNestedManyWithoutEventGroupInput
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  updatedAt: DateTime
}

input EventGroupCreateManyInput {
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  id: String
  metadata: JSON
  name: String!
  registrationCutoff: DateTime!
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  updatedAt: DateTime
}

input EventGroupCreateNestedOneWithoutEventsInput {
  connect: EventGroupWhereUniqueInput
  connectOrCreate: EventGroupCreateOrConnectWithoutEventsInput
  create: EventGroupCreateWithoutEventsInput
}

input EventGroupCreateNestedOneWithoutPromoCodesInput {
  connect: EventGroupWhereUniqueInput
  connectOrCreate: EventGroupCreateOrConnectWithoutPromoCodesInput
  create: EventGroupCreateWithoutPromoCodesInput
}

input EventGroupCreateNestedOneWithoutScheduleInput {
  connect: EventGroupWhereUniqueInput
  connectOrCreate: EventGroupCreateOrConnectWithoutScheduleInput
  create: EventGroupCreateWithoutScheduleInput
}

input EventGroupCreateOrConnectWithoutEventsInput {
  create: EventGroupCreateWithoutEventsInput!
  where: EventGroupWhereUniqueInput!
}

input EventGroupCreateOrConnectWithoutPromoCodesInput {
  create: EventGroupCreateWithoutPromoCodesInput!
  where: EventGroupWhereUniqueInput!
}

input EventGroupCreateOrConnectWithoutScheduleInput {
  create: EventGroupCreateWithoutScheduleInput!
  where: EventGroupWhereUniqueInput!
}

input EventGroupCreateWithoutEventsInput {
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  id: String
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventGroupInput
  registrationCutoff: DateTime!
  schedule: ScheduleItemCreateNestedManyWithoutEventGroupInput
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  updatedAt: DateTime
}

input EventGroupCreateWithoutPromoCodesInput {
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  events: EventCreateNestedManyWithoutEventGroupInput
  id: String
  metadata: JSON
  name: String!
  registrationCutoff: DateTime!
  schedule: ScheduleItemCreateNestedManyWithoutEventGroupInput
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  updatedAt: DateTime
}

input EventGroupCreateWithoutScheduleInput {
  createdAt: DateTime
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  events: EventCreateNestedManyWithoutEventGroupInput
  id: String
  metadata: JSON
  name: String!
  promoCodes: PromoCodeCreateNestedManyWithoutEventGroupInput
  registrationCutoff: DateTime!
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  updatedAt: DateTime
}

type EventGroupGroupBy {
  _avg: EventGroupAvgAggregate
  _count: EventGroupCountAggregate
  _max: EventGroupMaxAggregate
  _min: EventGroupMinAggregate
  _sum: EventGroupSumAggregate
  createdAt: DateTime!
  earlyBirdCutoff: DateTime!
  earlyBirdPrice: Float!
  endDate: DateTime!
  id: String!
  metadata: JSON
  name: String!
  registrationCutoff: DateTime!
  showcaseId: String
  startDate: DateTime!
  ticketPrice: Float!
  updatedAt: DateTime!
}

type EventGroupMaxAggregate {
  createdAt: DateTime
  earlyBirdCutoff: DateTime
  earlyBirdPrice: Float
  endDate: DateTime
  id: String
  name: String
  registrationCutoff: DateTime
  showcaseId: String
  startDate: DateTime
  ticketPrice: Float
  updatedAt: DateTime
}

input EventGroupMaxOrderByAggregateInput {
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  id: SortOrder
  name: SortOrder
  registrationCutoff: SortOrder
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  updatedAt: SortOrder
}

type EventGroupMinAggregate {
  createdAt: DateTime
  earlyBirdCutoff: DateTime
  earlyBirdPrice: Float
  endDate: DateTime
  id: String
  name: String
  registrationCutoff: DateTime
  showcaseId: String
  startDate: DateTime
  ticketPrice: Float
  updatedAt: DateTime
}

input EventGroupMinOrderByAggregateInput {
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  id: SortOrder
  name: SortOrder
  registrationCutoff: SortOrder
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  updatedAt: SortOrder
}

input EventGroupOrderByWithAggregationInput {
  _avg: EventGroupAvgOrderByAggregateInput
  _count: EventGroupCountOrderByAggregateInput
  _max: EventGroupMaxOrderByAggregateInput
  _min: EventGroupMinOrderByAggregateInput
  _sum: EventGroupSumOrderByAggregateInput
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  id: SortOrder
  metadata: SortOrder
  name: SortOrder
  registrationCutoff: SortOrder
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  updatedAt: SortOrder
}

input EventGroupOrderByWithRelationInput {
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  events: EventOrderByRelationAggregateInput
  id: SortOrder
  metadata: SortOrder
  name: SortOrder
  promoCodes: PromoCodeOrderByRelationAggregateInput
  registrationCutoff: SortOrder
  schedule: ScheduleItemOrderByRelationAggregateInput
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  updatedAt: SortOrder
}

input EventGroupRelationFilter {
  is: EventGroupWhereInput
  isNot: EventGroupWhereInput
}

enum EventGroupScalarFieldEnum {
  createdAt
  earlyBirdCutoff
  earlyBirdPrice
  endDate
  id
  metadata
  name
  registrationCutoff
  showcaseId
  startDate
  ticketPrice
  updatedAt
}

input EventGroupScalarWhereWithAggregatesInput {
  AND: [EventGroupScalarWhereWithAggregatesInput!]
  NOT: [EventGroupScalarWhereWithAggregatesInput!]
  OR: [EventGroupScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  earlyBirdCutoff: DateTimeWithAggregatesFilter
  earlyBirdPrice: FloatWithAggregatesFilter
  endDate: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  registrationCutoff: DateTimeWithAggregatesFilter
  showcaseId: StringNullableWithAggregatesFilter
  startDate: DateTimeWithAggregatesFilter
  ticketPrice: FloatWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type EventGroupSumAggregate {
  earlyBirdPrice: Float
  ticketPrice: Float
}

input EventGroupSumOrderByAggregateInput {
  earlyBirdPrice: SortOrder
  ticketPrice: SortOrder
}

input EventGroupUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  events: EventUpdateManyWithoutEventGroupInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventGroupInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventGroupInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventGroupUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventGroupUpdateOneRequiredWithoutEventsInput {
  connect: EventGroupWhereUniqueInput
  connectOrCreate: EventGroupCreateOrConnectWithoutEventsInput
  create: EventGroupCreateWithoutEventsInput
  update: EventGroupUpdateWithoutEventsInput
  upsert: EventGroupUpsertWithoutEventsInput
}

input EventGroupUpdateOneWithoutPromoCodesInput {
  connect: EventGroupWhereUniqueInput
  connectOrCreate: EventGroupCreateOrConnectWithoutPromoCodesInput
  create: EventGroupCreateWithoutPromoCodesInput
  delete: Boolean
  disconnect: Boolean
  update: EventGroupUpdateWithoutPromoCodesInput
  upsert: EventGroupUpsertWithoutPromoCodesInput
}

input EventGroupUpdateOneWithoutScheduleInput {
  connect: EventGroupWhereUniqueInput
  connectOrCreate: EventGroupCreateOrConnectWithoutScheduleInput
  create: EventGroupCreateWithoutScheduleInput
  delete: Boolean
  disconnect: Boolean
  update: EventGroupUpdateWithoutScheduleInput
  upsert: EventGroupUpsertWithoutScheduleInput
}

input EventGroupUpdateWithoutEventsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventGroupInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventGroupInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventGroupUpdateWithoutPromoCodesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  events: EventUpdateManyWithoutEventGroupInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventGroupInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventGroupUpdateWithoutScheduleInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  events: EventUpdateManyWithoutEventGroupInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventGroupInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventGroupUpsertWithoutEventsInput {
  create: EventGroupCreateWithoutEventsInput!
  update: EventGroupUpdateWithoutEventsInput!
}

input EventGroupUpsertWithoutPromoCodesInput {
  create: EventGroupCreateWithoutPromoCodesInput!
  update: EventGroupUpdateWithoutPromoCodesInput!
}

input EventGroupUpsertWithoutScheduleInput {
  create: EventGroupCreateWithoutScheduleInput!
  update: EventGroupUpdateWithoutScheduleInput!
}

input EventGroupWhereInput {
  AND: [EventGroupWhereInput!]
  NOT: [EventGroupWhereInput!]
  OR: [EventGroupWhereInput!]
  createdAt: DateTimeFilter
  earlyBirdCutoff: DateTimeFilter
  earlyBirdPrice: FloatFilter
  endDate: DateTimeFilter
  events: EventListRelationFilter
  id: StringFilter
  metadata: JsonNullableFilter
  name: StringFilter
  promoCodes: PromoCodeListRelationFilter
  registrationCutoff: DateTimeFilter
  schedule: ScheduleItemListRelationFilter
  showcaseId: StringNullableFilter
  startDate: DateTimeFilter
  ticketPrice: FloatFilter
  updatedAt: DateTimeFilter
}

input EventGroupWhereUniqueInput {
  id: String
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

type EventMaxAggregate {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime
  earlyBirdPrice: Float
  endDate: DateTime
  eventGroupId: String
  id: String
  majorityAge: Int
  name: String
  registrationCutoff: DateTime
  registrationsOpen: Boolean
  showcaseId: String
  startDate: DateTime
  ticketPrice: Float
  timezone: String
  updatedAt: DateTime
  venueId: String
}

input EventMaxOrderByAggregateInput {
  contentfulWebname: SortOrder
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  eventGroupId: SortOrder
  id: SortOrder
  majorityAge: SortOrder
  name: SortOrder
  registrationCutoff: SortOrder
  registrationsOpen: SortOrder
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

type EventMinAggregate {
  contentfulWebname: String
  createdAt: DateTime
  earlyBirdCutoff: DateTime
  earlyBirdPrice: Float
  endDate: DateTime
  eventGroupId: String
  id: String
  majorityAge: Int
  name: String
  registrationCutoff: DateTime
  registrationsOpen: Boolean
  showcaseId: String
  startDate: DateTime
  ticketPrice: Float
  timezone: String
  updatedAt: DateTime
  venueId: String
}

input EventMinOrderByAggregateInput {
  contentfulWebname: SortOrder
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  eventGroupId: SortOrder
  id: SortOrder
  majorityAge: SortOrder
  name: SortOrder
  registrationCutoff: SortOrder
  registrationsOpen: SortOrder
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithAggregationInput {
  _avg: EventAvgOrderByAggregateInput
  _count: EventCountOrderByAggregateInput
  _max: EventMaxOrderByAggregateInput
  _min: EventMinOrderByAggregateInput
  _sum: EventSumOrderByAggregateInput
  contentfulWebname: SortOrder
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  eventGroupId: SortOrder
  id: SortOrder
  majorityAge: SortOrder
  managers: SortOrder
  metadata: SortOrder
  name: SortOrder
  registrationCutoff: SortOrder
  registrationsOpen: SortOrder
  showcaseId: SortOrder
  startDate: SortOrder
  ticketPrice: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
  venueId: SortOrder
}

input EventOrderByWithRelationInput {
  contentfulWebname: SortOrder
  createdAt: SortOrder
  earlyBirdCutoff: SortOrder
  earlyBirdPrice: SortOrder
  endDate: SortOrder
  eventGroup: EventGroupOrderByWithRelationInput
  eventGroupId: SortOrder
  eventRestrictions: EventRestrictionOrderByRelationAggregateInput
  id: SortOrder
  interestedEmails: MailingListMemberOrderByRelationAggregateInput
  majorityAge: SortOrder
  managers: SortOrder
  metadata: SortOrder
  name: SortOrder
  promoCodes: PromoCodeOrderByRelationAggregateInput
  registrationCutoff: SortOrder
  registrationsOpen: SortOrder
  schedule: ScheduleItemOrderByRelationAggregateInput
  showcaseId: SortOrder
  sponsors: SponsorOrderByRelationAggregateInput
  startDate: SortOrder
  ticketPrice: SortOrder
  tickets: TicketOrderByRelationAggregateInput
  timezone: SortOrder
  updatedAt: SortOrder
  venue: VenueOrderByWithRelationInput
  venueId: SortOrder
}

input EventRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

type EventRestriction {
  Events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  _count: EventRestrictionCount
  createdAt: DateTime!
  details: String
  getMetadata(key: String!): String
  iconUri: String
  id: String!
  name: String!
  title: String!
  updatedAt: DateTime!
}

type EventRestrictionCount {
  Events: Int!
}

type EventRestrictionCountAggregate {
  _all: Int!
  createdAt: Int!
  details: Int!
  iconUri: Int!
  id: Int!
  metadata: Int!
  name: Int!
  title: Int!
  updatedAt: Int!
}

input EventRestrictionCountOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  iconUri: SortOrder
  id: SortOrder
  metadata: SortOrder
  name: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input EventRestrictionCreateInput {
  Events: EventCreateNestedManyWithoutEventRestrictionsInput
  createdAt: DateTime
  details: String
  iconUri: String
  id: String
  metadata: JSON
  name: String!
  title: String!
  updatedAt: DateTime
}

input EventRestrictionCreateManyInput {
  createdAt: DateTime
  details: String
  iconUri: String
  id: String
  metadata: JSON
  name: String!
  title: String!
  updatedAt: DateTime
}

input EventRestrictionCreateNestedManyWithoutEventsInput {
  connect: [EventRestrictionWhereUniqueInput!]
  connectOrCreate: [EventRestrictionCreateOrConnectWithoutEventsInput!]
  create: [EventRestrictionCreateWithoutEventsInput!]
}

input EventRestrictionCreateOrConnectWithoutEventsInput {
  create: EventRestrictionCreateWithoutEventsInput!
  where: EventRestrictionWhereUniqueInput!
}

input EventRestrictionCreateWithoutEventsInput {
  createdAt: DateTime
  details: String
  iconUri: String
  id: String
  metadata: JSON
  name: String!
  title: String!
  updatedAt: DateTime
}

type EventRestrictionGroupBy {
  _count: EventRestrictionCountAggregate
  _max: EventRestrictionMaxAggregate
  _min: EventRestrictionMinAggregate
  createdAt: DateTime!
  details: String
  iconUri: String
  id: String!
  metadata: JSON
  name: String!
  title: String!
  updatedAt: DateTime!
}

input EventRestrictionListRelationFilter {
  every: EventRestrictionWhereInput
  none: EventRestrictionWhereInput
  some: EventRestrictionWhereInput
}

type EventRestrictionMaxAggregate {
  createdAt: DateTime
  details: String
  iconUri: String
  id: String
  name: String
  title: String
  updatedAt: DateTime
}

input EventRestrictionMaxOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  iconUri: SortOrder
  id: SortOrder
  name: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type EventRestrictionMinAggregate {
  createdAt: DateTime
  details: String
  iconUri: String
  id: String
  name: String
  title: String
  updatedAt: DateTime
}

input EventRestrictionMinOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  iconUri: SortOrder
  id: SortOrder
  name: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input EventRestrictionOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventRestrictionOrderByWithAggregationInput {
  _count: EventRestrictionCountOrderByAggregateInput
  _max: EventRestrictionMaxOrderByAggregateInput
  _min: EventRestrictionMinOrderByAggregateInput
  createdAt: SortOrder
  details: SortOrder
  iconUri: SortOrder
  id: SortOrder
  metadata: SortOrder
  name: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input EventRestrictionOrderByWithRelationInput {
  Events: EventOrderByRelationAggregateInput
  createdAt: SortOrder
  details: SortOrder
  iconUri: SortOrder
  id: SortOrder
  metadata: SortOrder
  name: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum EventRestrictionScalarFieldEnum {
  createdAt
  details
  iconUri
  id
  metadata
  name
  title
  updatedAt
}

input EventRestrictionScalarWhereInput {
  AND: [EventRestrictionScalarWhereInput!]
  NOT: [EventRestrictionScalarWhereInput!]
  OR: [EventRestrictionScalarWhereInput!]
  createdAt: DateTimeFilter
  details: StringNullableFilter
  iconUri: StringNullableFilter
  id: StringFilter
  metadata: JsonNullableFilter
  name: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input EventRestrictionScalarWhereWithAggregatesInput {
  AND: [EventRestrictionScalarWhereWithAggregatesInput!]
  NOT: [EventRestrictionScalarWhereWithAggregatesInput!]
  OR: [EventRestrictionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  details: StringNullableWithAggregatesFilter
  iconUri: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input EventRestrictionUpdateInput {
  Events: EventUpdateManyWithoutEventRestrictionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  iconUri: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventRestrictionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  iconUri: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventRestrictionUpdateManyWithWhereWithoutEventsInput {
  data: EventRestrictionUpdateManyMutationInput!
  where: EventRestrictionScalarWhereInput!
}

input EventRestrictionUpdateManyWithoutEventsInput {
  connect: [EventRestrictionWhereUniqueInput!]
  connectOrCreate: [EventRestrictionCreateOrConnectWithoutEventsInput!]
  create: [EventRestrictionCreateWithoutEventsInput!]
  delete: [EventRestrictionWhereUniqueInput!]
  deleteMany: [EventRestrictionScalarWhereInput!]
  disconnect: [EventRestrictionWhereUniqueInput!]
  set: [EventRestrictionWhereUniqueInput!]
  update: [EventRestrictionUpdateWithWhereUniqueWithoutEventsInput!]
  updateMany: [EventRestrictionUpdateManyWithWhereWithoutEventsInput!]
  upsert: [EventRestrictionUpsertWithWhereUniqueWithoutEventsInput!]
}

input EventRestrictionUpdateWithWhereUniqueWithoutEventsInput {
  data: EventRestrictionUpdateWithoutEventsInput!
  where: EventRestrictionWhereUniqueInput!
}

input EventRestrictionUpdateWithoutEventsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  iconUri: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventRestrictionUpsertWithWhereUniqueWithoutEventsInput {
  create: EventRestrictionCreateWithoutEventsInput!
  update: EventRestrictionUpdateWithoutEventsInput!
  where: EventRestrictionWhereUniqueInput!
}

input EventRestrictionWhereInput {
  AND: [EventRestrictionWhereInput!]
  Events: EventListRelationFilter
  NOT: [EventRestrictionWhereInput!]
  OR: [EventRestrictionWhereInput!]
  createdAt: DateTimeFilter
  details: StringNullableFilter
  iconUri: StringNullableFilter
  id: StringFilter
  metadata: JsonNullableFilter
  name: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input EventRestrictionWhereUniqueInput {
  id: String
}

enum EventScalarFieldEnum {
  contentfulWebname
  createdAt
  earlyBirdCutoff
  earlyBirdPrice
  endDate
  eventGroupId
  id
  majorityAge
  managers
  metadata
  name
  registrationCutoff
  registrationsOpen
  showcaseId
  startDate
  ticketPrice
  timezone
  updatedAt
  venueId
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  contentfulWebname: StringNullableFilter
  createdAt: DateTimeFilter
  earlyBirdCutoff: DateTimeFilter
  earlyBirdPrice: FloatFilter
  endDate: DateTimeFilter
  eventGroupId: StringFilter
  id: StringFilter
  majorityAge: IntFilter
  managers: StringNullableListFilter
  metadata: JsonNullableFilter
  name: StringFilter
  registrationCutoff: DateTimeFilter
  registrationsOpen: BoolFilter
  showcaseId: StringNullableFilter
  startDate: DateTimeFilter
  ticketPrice: FloatFilter
  timezone: StringNullableFilter
  updatedAt: DateTimeFilter
  venueId: StringNullableFilter
}

input EventScalarWhereWithAggregatesInput {
  AND: [EventScalarWhereWithAggregatesInput!]
  NOT: [EventScalarWhereWithAggregatesInput!]
  OR: [EventScalarWhereWithAggregatesInput!]
  contentfulWebname: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  earlyBirdCutoff: DateTimeWithAggregatesFilter
  earlyBirdPrice: FloatWithAggregatesFilter
  endDate: DateTimeWithAggregatesFilter
  eventGroupId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  majorityAge: IntWithAggregatesFilter
  managers: StringNullableListFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  registrationCutoff: DateTimeWithAggregatesFilter
  registrationsOpen: BoolWithAggregatesFilter
  showcaseId: StringNullableWithAggregatesFilter
  startDate: DateTimeWithAggregatesFilter
  ticketPrice: FloatWithAggregatesFilter
  timezone: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  venueId: StringNullableWithAggregatesFilter
}

type EventSumAggregate {
  earlyBirdPrice: Float
  majorityAge: Int
  ticketPrice: Float
}

input EventSumOrderByAggregateInput {
  earlyBirdPrice: SortOrder
  majorityAge: SortOrder
  ticketPrice: SortOrder
}

input EventUpdateInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneRequiredWithoutEventsInput
  eventRestrictions: EventRestrictionUpdateManyWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  interestedEmails: MailingListMemberUpdateManyWithoutInterestedInEventsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  sponsors: SponsorUpdateManyWithoutEventInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutEventInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: VenueUpdateOneWithoutEventsInput
}

input EventUpdateManyMutationInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventUpdateManyWithWhereWithoutEventGroupInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithWhereWithoutEventRestrictionsInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithWhereWithoutInterestedEmailsInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithWhereWithoutVenueInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithoutEventGroupInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutEventGroupInput!]
  create: [EventCreateWithoutEventGroupInput!]
  createMany: EventCreateManyEventGroupInputEnvelope
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutEventGroupInput!]
  updateMany: [EventUpdateManyWithWhereWithoutEventGroupInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutEventGroupInput!]
}

input EventUpdateManyWithoutEventRestrictionsInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutEventRestrictionsInput!]
  create: [EventCreateWithoutEventRestrictionsInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutEventRestrictionsInput!]
  updateMany: [EventUpdateManyWithWhereWithoutEventRestrictionsInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutEventRestrictionsInput!]
}

input EventUpdateManyWithoutInterestedEmailsInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutInterestedEmailsInput!]
  create: [EventCreateWithoutInterestedEmailsInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutInterestedEmailsInput!]
  updateMany: [EventUpdateManyWithWhereWithoutInterestedEmailsInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutInterestedEmailsInput!]
}

input EventUpdateManyWithoutVenueInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutVenueInput!]
  create: [EventCreateWithoutVenueInput!]
  createMany: EventCreateManyVenueInputEnvelope
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutVenueInput!]
  updateMany: [EventUpdateManyWithWhereWithoutVenueInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutVenueInput!]
}

input EventUpdateOneRequiredWithoutTicketsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutTicketsInput
  create: EventCreateWithoutTicketsInput
  update: EventUpdateWithoutTicketsInput
  upsert: EventUpsertWithoutTicketsInput
}

input EventUpdateOneWithoutPromoCodesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutPromoCodesInput
  create: EventCreateWithoutPromoCodesInput
  delete: Boolean
  disconnect: Boolean
  update: EventUpdateWithoutPromoCodesInput
  upsert: EventUpsertWithoutPromoCodesInput
}

input EventUpdateOneWithoutScheduleInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutScheduleInput
  create: EventCreateWithoutScheduleInput
  delete: Boolean
  disconnect: Boolean
  update: EventUpdateWithoutScheduleInput
  upsert: EventUpsertWithoutScheduleInput
}

input EventUpdateOneWithoutSponsorsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutSponsorsInput
  create: EventCreateWithoutSponsorsInput
  delete: Boolean
  disconnect: Boolean
  update: EventUpdateWithoutSponsorsInput
  upsert: EventUpsertWithoutSponsorsInput
}

input EventUpdateWithWhereUniqueWithoutEventGroupInput {
  data: EventUpdateWithoutEventGroupInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithWhereUniqueWithoutEventRestrictionsInput {
  data: EventUpdateWithoutEventRestrictionsInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithWhereUniqueWithoutInterestedEmailsInput {
  data: EventUpdateWithoutInterestedEmailsInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithWhereUniqueWithoutVenueInput {
  data: EventUpdateWithoutVenueInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithoutEventGroupInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventRestrictions: EventRestrictionUpdateManyWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  interestedEmails: MailingListMemberUpdateManyWithoutInterestedInEventsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  sponsors: SponsorUpdateManyWithoutEventInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutEventInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: VenueUpdateOneWithoutEventsInput
}

input EventUpdateWithoutEventRestrictionsInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneRequiredWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  interestedEmails: MailingListMemberUpdateManyWithoutInterestedInEventsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  sponsors: SponsorUpdateManyWithoutEventInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutEventInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: VenueUpdateOneWithoutEventsInput
}

input EventUpdateWithoutInterestedEmailsInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneRequiredWithoutEventsInput
  eventRestrictions: EventRestrictionUpdateManyWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  sponsors: SponsorUpdateManyWithoutEventInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutEventInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: VenueUpdateOneWithoutEventsInput
}

input EventUpdateWithoutPromoCodesInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneRequiredWithoutEventsInput
  eventRestrictions: EventRestrictionUpdateManyWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  interestedEmails: MailingListMemberUpdateManyWithoutInterestedInEventsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  sponsors: SponsorUpdateManyWithoutEventInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutEventInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: VenueUpdateOneWithoutEventsInput
}

input EventUpdateWithoutScheduleInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneRequiredWithoutEventsInput
  eventRestrictions: EventRestrictionUpdateManyWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  interestedEmails: MailingListMemberUpdateManyWithoutInterestedInEventsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  sponsors: SponsorUpdateManyWithoutEventInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutEventInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: VenueUpdateOneWithoutEventsInput
}

input EventUpdateWithoutSponsorsInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneRequiredWithoutEventsInput
  eventRestrictions: EventRestrictionUpdateManyWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  interestedEmails: MailingListMemberUpdateManyWithoutInterestedInEventsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutEventInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: VenueUpdateOneWithoutEventsInput
}

input EventUpdateWithoutTicketsInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneRequiredWithoutEventsInput
  eventRestrictions: EventRestrictionUpdateManyWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  interestedEmails: MailingListMemberUpdateManyWithoutInterestedInEventsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  sponsors: SponsorUpdateManyWithoutEventInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: VenueUpdateOneWithoutEventsInput
}

input EventUpdateWithoutVenueInput {
  contentfulWebname: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earlyBirdCutoff: DateTimeFieldUpdateOperationsInput
  earlyBirdPrice: FloatFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneRequiredWithoutEventsInput
  eventRestrictions: EventRestrictionUpdateManyWithoutEventsInput
  id: StringFieldUpdateOperationsInput
  interestedEmails: MailingListMemberUpdateManyWithoutInterestedInEventsInput
  majorityAge: IntFieldUpdateOperationsInput
  managers: EventUpdatemanagersInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  promoCodes: PromoCodeUpdateManyWithoutEventInput
  registrationCutoff: DateTimeFieldUpdateOperationsInput
  registrationsOpen: BoolFieldUpdateOperationsInput
  schedule: ScheduleItemUpdateManyWithoutEventInput
  showcaseId: NullableStringFieldUpdateOperationsInput
  sponsors: SponsorUpdateManyWithoutEventInput
  startDate: DateTimeFieldUpdateOperationsInput
  ticketPrice: FloatFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutEventInput
  timezone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventUpdatemanagersInput {
  push: [String!]
  set: [String!]
}

input EventUpsertWithWhereUniqueWithoutEventGroupInput {
  create: EventCreateWithoutEventGroupInput!
  update: EventUpdateWithoutEventGroupInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutEventRestrictionsInput {
  create: EventCreateWithoutEventRestrictionsInput!
  update: EventUpdateWithoutEventRestrictionsInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutInterestedEmailsInput {
  create: EventCreateWithoutInterestedEmailsInput!
  update: EventUpdateWithoutInterestedEmailsInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutVenueInput {
  create: EventCreateWithoutVenueInput!
  update: EventUpdateWithoutVenueInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithoutPromoCodesInput {
  create: EventCreateWithoutPromoCodesInput!
  update: EventUpdateWithoutPromoCodesInput!
}

input EventUpsertWithoutScheduleInput {
  create: EventCreateWithoutScheduleInput!
  update: EventUpdateWithoutScheduleInput!
}

input EventUpsertWithoutSponsorsInput {
  create: EventCreateWithoutSponsorsInput!
  update: EventUpdateWithoutSponsorsInput!
}

input EventUpsertWithoutTicketsInput {
  create: EventCreateWithoutTicketsInput!
  update: EventUpdateWithoutTicketsInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  contentfulWebname: StringNullableFilter
  createdAt: DateTimeFilter
  earlyBirdCutoff: DateTimeFilter
  earlyBirdPrice: FloatFilter
  endDate: DateTimeFilter
  eventGroup: EventGroupRelationFilter
  eventGroupId: StringFilter
  eventRestrictions: EventRestrictionListRelationFilter
  id: StringFilter
  interestedEmails: MailingListMemberListRelationFilter
  majorityAge: IntFilter
  managers: StringNullableListFilter
  metadata: JsonNullableFilter
  name: StringFilter
  promoCodes: PromoCodeListRelationFilter
  registrationCutoff: DateTimeFilter
  registrationsOpen: BoolFilter
  schedule: ScheduleItemListRelationFilter
  showcaseId: StringNullableFilter
  sponsors: SponsorListRelationFilter
  startDate: DateTimeFilter
  ticketPrice: FloatFilter
  tickets: TicketListRelationFilter
  timezone: StringNullableFilter
  updatedAt: DateTimeFilter
  venue: VenueRelationFilter
  venueId: StringNullableFilter
}

input EventWhereUniqueInput {
  id: String
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonNullableFilter {
  equals: JSON
  not: JSON
}

input JsonNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedJsonNullableFilter
  _min: NestedJsonNullableFilter
  equals: JSON
  not: JSON
}

type MailingListMember {
  _count: MailingListMemberCount
  createdAt: DateTime!
  email: String!
  getMetadata(key: String!): String
  id: String!
  interestedInEvents(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  lastEmailed: DateTime
  updatedAt: DateTime!
}

type MailingListMemberCount {
  interestedInEvents: Int!
}

type MailingListMemberCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  lastEmailed: Int!
  metadata: Int!
  updatedAt: Int!
}

input MailingListMemberCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastEmailed: SortOrder
  metadata: SortOrder
  updatedAt: SortOrder
}

input MailingListMemberCreateInput {
  createdAt: DateTime
  email: String!
  id: String
  interestedInEvents: EventCreateNestedManyWithoutInterestedEmailsInput
  lastEmailed: DateTime
  metadata: JSON
  updatedAt: DateTime
}

input MailingListMemberCreateManyInput {
  createdAt: DateTime
  email: String!
  id: String
  lastEmailed: DateTime
  metadata: JSON
  updatedAt: DateTime
}

input MailingListMemberCreateNestedManyWithoutInterestedInEventsInput {
  connect: [MailingListMemberWhereUniqueInput!]
  connectOrCreate: [MailingListMemberCreateOrConnectWithoutInterestedInEventsInput!]
  create: [MailingListMemberCreateWithoutInterestedInEventsInput!]
}

input MailingListMemberCreateOrConnectWithoutInterestedInEventsInput {
  create: MailingListMemberCreateWithoutInterestedInEventsInput!
  where: MailingListMemberWhereUniqueInput!
}

input MailingListMemberCreateWithoutInterestedInEventsInput {
  createdAt: DateTime
  email: String!
  id: String
  lastEmailed: DateTime
  metadata: JSON
  updatedAt: DateTime
}

type MailingListMemberGroupBy {
  _count: MailingListMemberCountAggregate
  _max: MailingListMemberMaxAggregate
  _min: MailingListMemberMinAggregate
  createdAt: DateTime!
  email: String!
  id: String!
  lastEmailed: DateTime
  metadata: JSON
  updatedAt: DateTime!
}

input MailingListMemberListRelationFilter {
  every: MailingListMemberWhereInput
  none: MailingListMemberWhereInput
  some: MailingListMemberWhereInput
}

type MailingListMemberMaxAggregate {
  createdAt: DateTime
  email: String
  id: String
  lastEmailed: DateTime
  updatedAt: DateTime
}

input MailingListMemberMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastEmailed: SortOrder
  updatedAt: SortOrder
}

type MailingListMemberMinAggregate {
  createdAt: DateTime
  email: String
  id: String
  lastEmailed: DateTime
  updatedAt: DateTime
}

input MailingListMemberMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastEmailed: SortOrder
  updatedAt: SortOrder
}

input MailingListMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input MailingListMemberOrderByWithAggregationInput {
  _count: MailingListMemberCountOrderByAggregateInput
  _max: MailingListMemberMaxOrderByAggregateInput
  _min: MailingListMemberMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastEmailed: SortOrder
  metadata: SortOrder
  updatedAt: SortOrder
}

input MailingListMemberOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  interestedInEvents: EventOrderByRelationAggregateInput
  lastEmailed: SortOrder
  metadata: SortOrder
  updatedAt: SortOrder
}

enum MailingListMemberScalarFieldEnum {
  createdAt
  email
  id
  lastEmailed
  metadata
  updatedAt
}

input MailingListMemberScalarWhereInput {
  AND: [MailingListMemberScalarWhereInput!]
  NOT: [MailingListMemberScalarWhereInput!]
  OR: [MailingListMemberScalarWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  lastEmailed: DateTimeNullableFilter
  metadata: JsonNullableFilter
  updatedAt: DateTimeFilter
}

input MailingListMemberScalarWhereWithAggregatesInput {
  AND: [MailingListMemberScalarWhereWithAggregatesInput!]
  NOT: [MailingListMemberScalarWhereWithAggregatesInput!]
  OR: [MailingListMemberScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastEmailed: DateTimeNullableWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input MailingListMemberUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interestedInEvents: EventUpdateManyWithoutInterestedEmailsInput
  lastEmailed: NullableDateTimeFieldUpdateOperationsInput
  metadata: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MailingListMemberUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastEmailed: NullableDateTimeFieldUpdateOperationsInput
  metadata: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MailingListMemberUpdateManyWithWhereWithoutInterestedInEventsInput {
  data: MailingListMemberUpdateManyMutationInput!
  where: MailingListMemberScalarWhereInput!
}

input MailingListMemberUpdateManyWithoutInterestedInEventsInput {
  connect: [MailingListMemberWhereUniqueInput!]
  connectOrCreate: [MailingListMemberCreateOrConnectWithoutInterestedInEventsInput!]
  create: [MailingListMemberCreateWithoutInterestedInEventsInput!]
  delete: [MailingListMemberWhereUniqueInput!]
  deleteMany: [MailingListMemberScalarWhereInput!]
  disconnect: [MailingListMemberWhereUniqueInput!]
  set: [MailingListMemberWhereUniqueInput!]
  update: [MailingListMemberUpdateWithWhereUniqueWithoutInterestedInEventsInput!]
  updateMany: [MailingListMemberUpdateManyWithWhereWithoutInterestedInEventsInput!]
  upsert: [MailingListMemberUpsertWithWhereUniqueWithoutInterestedInEventsInput!]
}

input MailingListMemberUpdateWithWhereUniqueWithoutInterestedInEventsInput {
  data: MailingListMemberUpdateWithoutInterestedInEventsInput!
  where: MailingListMemberWhereUniqueInput!
}

input MailingListMemberUpdateWithoutInterestedInEventsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastEmailed: NullableDateTimeFieldUpdateOperationsInput
  metadata: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MailingListMemberUpsertWithWhereUniqueWithoutInterestedInEventsInput {
  create: MailingListMemberCreateWithoutInterestedInEventsInput!
  update: MailingListMemberUpdateWithoutInterestedInEventsInput!
  where: MailingListMemberWhereUniqueInput!
}

input MailingListMemberWhereInput {
  AND: [MailingListMemberWhereInput!]
  NOT: [MailingListMemberWhereInput!]
  OR: [MailingListMemberWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  interestedInEvents: EventListRelationFilter
  lastEmailed: DateTimeNullableFilter
  metadata: JsonNullableFilter
  updatedAt: DateTimeFilter
}

input MailingListMemberWhereUniqueInput {
  email: String
  id: String
}

type Mutation {
  createEmailTemplate(data: EmailTemplateCreateInput!): EmailTemplate!
  createEvent(data: EventCreateInput!): Event!
  createEventGroup(data: EventGroupCreateInput!): EventGroup!
  createEventRestriction(data: EventRestrictionCreateInput!): EventRestriction!
  createMailingListMember(data: MailingListMemberCreateInput!): MailingListMember!
  createManyEmailTemplate(data: [EmailTemplateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyEvent(data: [EventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyEventGroup(data: [EventGroupCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyEventRestriction(data: [EventRestrictionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMailingListMember(data: [MailingListMemberCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPayment(data: [PaymentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPerson(data: [PersonCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPromoCode(data: [PromoCodeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyScheduleItem(data: [ScheduleItemCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySponsor(data: [SponsorCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTicket(data: [TicketCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVenue(data: [VenueCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createPayment(data: PaymentCreateInput!): Payment!
  createPerson(data: PersonCreateInput!): Person!
  createPromoCode(data: PromoCodeCreateInput!): PromoCode!
  createScheduleItem(data: ScheduleItemCreateInput!): ScheduleItem!
  createSponsor(data: SponsorCreateInput!): Sponsor!
  createTicket(data: TicketCreateInput!): Ticket!
  createVenue(data: VenueCreateInput!): Venue!
  deleteEmailTemplate(where: EmailTemplateWhereUniqueInput!): EmailTemplate
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEventGroup(where: EventGroupWhereUniqueInput!): EventGroup
  deleteEventRestriction(where: EventRestrictionWhereUniqueInput!): EventRestriction
  deleteMailingListMember(where: MailingListMemberWhereUniqueInput!): MailingListMember
  deleteManyEmailTemplate(where: EmailTemplateWhereInput): AffectedRowsOutput!
  deleteManyEvent(where: EventWhereInput): AffectedRowsOutput!
  deleteManyEventGroup(where: EventGroupWhereInput): AffectedRowsOutput!
  deleteManyEventRestriction(where: EventRestrictionWhereInput): AffectedRowsOutput!
  deleteManyMailingListMember(where: MailingListMemberWhereInput): AffectedRowsOutput!
  deleteManyPayment(where: PaymentWhereInput): AffectedRowsOutput!
  deleteManyPerson(where: PersonWhereInput): AffectedRowsOutput!
  deleteManyPromoCode(where: PromoCodeWhereInput): AffectedRowsOutput!
  deleteManyScheduleItem(where: ScheduleItemWhereInput): AffectedRowsOutput!
  deleteManySponsor(where: SponsorWhereInput): AffectedRowsOutput!
  deleteManyTicket(where: TicketWhereInput): AffectedRowsOutput!
  deleteManyVenue(where: VenueWhereInput): AffectedRowsOutput!
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePromoCode(where: PromoCodeWhereUniqueInput!): PromoCode
  deleteScheduleItem(where: ScheduleItemWhereUniqueInput!): ScheduleItem
  deleteSponsor(where: SponsorWhereUniqueInput!): Sponsor
  deleteTicket(where: TicketWhereUniqueInput!): Ticket
  deleteVenue(where: VenueWhereUniqueInput!): Venue
  finalizePayment(paymentIntentId: String!): [String!]!
  registerForEvent(eventWhere: EventWhereUniqueInput!, guardianData: PersonCreateInput, promoCode: String, ticketData: TicketCreateWithoutEventInput, ticketsData: [TicketCreateWithoutEventInput!]): String
  setEmailTemplateMetadata(key: String!, value: String!, where: EmailTemplateWhereUniqueInput!): EmailTemplate
  setEventGroupMetadata(key: String!, value: String!, where: EventGroupWhereUniqueInput!): EventGroup
  setEventMetadata(key: String!, value: String!, where: EventWhereUniqueInput!): Event
  setEventRestrictionMetadata(key: String!, value: String!, where: EventRestrictionWhereUniqueInput!): EventRestriction
  setMailingListMemberMetadata(key: String!, value: String!, where: MailingListMemberWhereUniqueInput!): MailingListMember
  setPaymentMetadata(key: String!, value: String!, where: PaymentWhereUniqueInput!): Payment
  setPersonMetadata(key: String!, value: String!, where: PersonWhereUniqueInput!): Person
  setPromoCodeMetadata(key: String!, value: String!, where: PromoCodeWhereUniqueInput!): PromoCode
  setScheduleItemMetadata(key: String!, value: String!, where: ScheduleItemWhereUniqueInput!): ScheduleItem
  setSponsorMetadata(key: String!, value: String!, where: SponsorWhereUniqueInput!): Sponsor
  setTicketMetadata(key: String!, value: String!, where: TicketWhereUniqueInput!): Ticket
  setVenueMetadata(key: String!, value: String!, where: VenueWhereUniqueInput!): Venue
  subscribeToMailingList(email: String!, where: EventWhereUniqueInput!): MailingListMember
  updateEmailTemplate(data: EmailTemplateUpdateInput!, where: EmailTemplateWhereUniqueInput!): EmailTemplate
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateEventGroup(data: EventGroupUpdateInput!, where: EventGroupWhereUniqueInput!): EventGroup
  updateEventRestriction(data: EventRestrictionUpdateInput!, where: EventRestrictionWhereUniqueInput!): EventRestriction
  updateMailingListMember(data: MailingListMemberUpdateInput!, where: MailingListMemberWhereUniqueInput!): MailingListMember
  updateManyEmailTemplate(data: EmailTemplateUpdateManyMutationInput!, where: EmailTemplateWhereInput): AffectedRowsOutput!
  updateManyEvent(data: EventUpdateManyMutationInput!, where: EventWhereInput): AffectedRowsOutput!
  updateManyEventGroup(data: EventGroupUpdateManyMutationInput!, where: EventGroupWhereInput): AffectedRowsOutput!
  updateManyEventRestriction(data: EventRestrictionUpdateManyMutationInput!, where: EventRestrictionWhereInput): AffectedRowsOutput!
  updateManyMailingListMember(data: MailingListMemberUpdateManyMutationInput!, where: MailingListMemberWhereInput): AffectedRowsOutput!
  updateManyPayment(data: PaymentUpdateManyMutationInput!, where: PaymentWhereInput): AffectedRowsOutput!
  updateManyPerson(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): AffectedRowsOutput!
  updateManyPromoCode(data: PromoCodeUpdateManyMutationInput!, where: PromoCodeWhereInput): AffectedRowsOutput!
  updateManyScheduleItem(data: ScheduleItemUpdateManyMutationInput!, where: ScheduleItemWhereInput): AffectedRowsOutput!
  updateManySponsor(data: SponsorUpdateManyMutationInput!, where: SponsorWhereInput): AffectedRowsOutput!
  updateManyTicket(data: TicketUpdateManyMutationInput!, where: TicketWhereInput): AffectedRowsOutput!
  updateManyVenue(data: VenueUpdateManyMutationInput!, where: VenueWhereInput): AffectedRowsOutput!
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updatePromoCode(data: PromoCodeUpdateInput!, where: PromoCodeWhereUniqueInput!): PromoCode
  updateScheduleItem(data: ScheduleItemUpdateInput!, where: ScheduleItemWhereUniqueInput!): ScheduleItem
  updateSponsor(data: SponsorUpdateInput!, where: SponsorWhereUniqueInput!): Sponsor
  updateTicket(data: TicketUpdateInput!, where: TicketWhereUniqueInput!): Ticket
  updateVenue(data: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue
  uploadEventRestrictionIcon(upload: Upload!, where: EventRestrictionWhereUniqueInput!): EventRestriction
  uploadSponsorLogo(upload: Upload!, where: SponsorWhereUniqueInput!): Sponsor
  upsertEmailTemplate(create: EmailTemplateCreateInput!, update: EmailTemplateUpdateInput!, where: EmailTemplateWhereUniqueInput!): EmailTemplate!
  upsertEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertEventGroup(create: EventGroupCreateInput!, update: EventGroupUpdateInput!, where: EventGroupWhereUniqueInput!): EventGroup!
  upsertEventRestriction(create: EventRestrictionCreateInput!, update: EventRestrictionUpdateInput!, where: EventRestrictionWhereUniqueInput!): EventRestriction!
  upsertMailingListMember(create: MailingListMemberCreateInput!, update: MailingListMemberUpdateInput!, where: MailingListMemberWhereUniqueInput!): MailingListMember!
  upsertPayment(create: PaymentCreateInput!, update: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment!
  upsertPerson(create: PersonCreateInput!, update: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person!
  upsertPromoCode(create: PromoCodeCreateInput!, update: PromoCodeUpdateInput!, where: PromoCodeWhereUniqueInput!): PromoCode!
  upsertScheduleItem(create: ScheduleItemCreateInput!, update: ScheduleItemUpdateInput!, where: ScheduleItemWhereUniqueInput!): ScheduleItem!
  upsertSponsor(create: SponsorCreateInput!, update: SponsorUpdateInput!, where: SponsorWhereUniqueInput!): Sponsor!
  upsertTicket(create: TicketCreateInput!, update: TicketUpdateInput!, where: TicketWhereUniqueInput!): Ticket!
  upsertVenue(create: VenueCreateInput!, update: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue!
  withdrawFailedPayment(paymentIntentId: String!): Boolean!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumDiscountTypeFilter {
  equals: DiscountType
  in: [DiscountType!]
  not: NestedEnumDiscountTypeFilter
  notIn: [DiscountType!]
}

input NestedEnumDiscountTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumDiscountTypeFilter
  _min: NestedEnumDiscountTypeFilter
  equals: DiscountType
  in: [DiscountType!]
  not: NestedEnumDiscountTypeWithAggregatesFilter
  notIn: [DiscountType!]
}

input NestedEnumEmailWhenFromFilter {
  equals: EmailWhenFrom
  in: [EmailWhenFrom!]
  not: NestedEnumEmailWhenFromFilter
  notIn: [EmailWhenFrom!]
}

input NestedEnumEmailWhenFromWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumEmailWhenFromFilter
  _min: NestedEnumEmailWhenFromFilter
  equals: EmailWhenFrom
  in: [EmailWhenFrom!]
  not: NestedEnumEmailWhenFromWithAggregatesFilter
  notIn: [EmailWhenFrom!]
}

input NestedEnumTicketTypeFilter {
  equals: TicketType
  in: [TicketType!]
  not: NestedEnumTicketTypeFilter
  notIn: [TicketType!]
}

input NestedEnumTicketTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTicketTypeFilter
  _min: NestedEnumTicketTypeFilter
  equals: TicketType
  in: [TicketType!]
  not: NestedEnumTicketTypeWithAggregatesFilter
  notIn: [TicketType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedJsonNullableFilter {
  equals: JSON
  not: JSON
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Payment {
  _count: PaymentCount
  complete: Boolean!
  createdAt: DateTime!
  getMetadata(key: String!): String
  id: String!
  stripePaymentIntentId: String!
  tickets(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): [Ticket!]!
  updatedAt: DateTime!
}

type PaymentCount {
  tickets: Int!
}

type PaymentCountAggregate {
  _all: Int!
  complete: Int!
  createdAt: Int!
  id: Int!
  metadata: Int!
  stripePaymentIntentId: Int!
  updatedAt: Int!
}

input PaymentCountOrderByAggregateInput {
  complete: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metadata: SortOrder
  stripePaymentIntentId: SortOrder
  updatedAt: SortOrder
}

input PaymentCreateInput {
  complete: Boolean
  createdAt: DateTime
  id: String
  metadata: JSON
  stripePaymentIntentId: String!
  tickets: TicketCreateNestedManyWithoutPaymentInput
  updatedAt: DateTime
}

input PaymentCreateManyInput {
  complete: Boolean
  createdAt: DateTime
  id: String
  metadata: JSON
  stripePaymentIntentId: String!
  updatedAt: DateTime
}

input PaymentCreateNestedOneWithoutTicketsInput {
  connect: PaymentWhereUniqueInput
  connectOrCreate: PaymentCreateOrConnectWithoutTicketsInput
  create: PaymentCreateWithoutTicketsInput
}

input PaymentCreateOrConnectWithoutTicketsInput {
  create: PaymentCreateWithoutTicketsInput!
  where: PaymentWhereUniqueInput!
}

input PaymentCreateWithoutTicketsInput {
  complete: Boolean
  createdAt: DateTime
  id: String
  metadata: JSON
  stripePaymentIntentId: String!
  updatedAt: DateTime
}

type PaymentGroupBy {
  _count: PaymentCountAggregate
  _max: PaymentMaxAggregate
  _min: PaymentMinAggregate
  complete: Boolean!
  createdAt: DateTime!
  id: String!
  metadata: JSON
  stripePaymentIntentId: String!
  updatedAt: DateTime!
}

type PaymentMaxAggregate {
  complete: Boolean
  createdAt: DateTime
  id: String
  stripePaymentIntentId: String
  updatedAt: DateTime
}

input PaymentMaxOrderByAggregateInput {
  complete: SortOrder
  createdAt: SortOrder
  id: SortOrder
  stripePaymentIntentId: SortOrder
  updatedAt: SortOrder
}

type PaymentMinAggregate {
  complete: Boolean
  createdAt: DateTime
  id: String
  stripePaymentIntentId: String
  updatedAt: DateTime
}

input PaymentMinOrderByAggregateInput {
  complete: SortOrder
  createdAt: SortOrder
  id: SortOrder
  stripePaymentIntentId: SortOrder
  updatedAt: SortOrder
}

input PaymentOrderByWithAggregationInput {
  _count: PaymentCountOrderByAggregateInput
  _max: PaymentMaxOrderByAggregateInput
  _min: PaymentMinOrderByAggregateInput
  complete: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metadata: SortOrder
  stripePaymentIntentId: SortOrder
  updatedAt: SortOrder
}

input PaymentOrderByWithRelationInput {
  complete: SortOrder
  createdAt: SortOrder
  id: SortOrder
  metadata: SortOrder
  stripePaymentIntentId: SortOrder
  tickets: TicketOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input PaymentRelationFilter {
  is: PaymentWhereInput
  isNot: PaymentWhereInput
}

enum PaymentScalarFieldEnum {
  complete
  createdAt
  id
  metadata
  stripePaymentIntentId
  updatedAt
}

input PaymentScalarWhereWithAggregatesInput {
  AND: [PaymentScalarWhereWithAggregatesInput!]
  NOT: [PaymentScalarWhereWithAggregatesInput!]
  OR: [PaymentScalarWhereWithAggregatesInput!]
  complete: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  stripePaymentIntentId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PaymentUpdateInput {
  complete: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  stripePaymentIntentId: StringFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutPaymentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentUpdateManyMutationInput {
  complete: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  stripePaymentIntentId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentUpdateOneWithoutTicketsInput {
  connect: PaymentWhereUniqueInput
  connectOrCreate: PaymentCreateOrConnectWithoutTicketsInput
  create: PaymentCreateWithoutTicketsInput
  delete: Boolean
  disconnect: Boolean
  update: PaymentUpdateWithoutTicketsInput
  upsert: PaymentUpsertWithoutTicketsInput
}

input PaymentUpdateWithoutTicketsInput {
  complete: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  stripePaymentIntentId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentUpsertWithoutTicketsInput {
  create: PaymentCreateWithoutTicketsInput!
  update: PaymentUpdateWithoutTicketsInput!
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  complete: BoolFilter
  createdAt: DateTimeFilter
  id: StringFilter
  metadata: JsonNullableFilter
  stripePaymentIntentId: StringFilter
  tickets: TicketListRelationFilter
  updatedAt: DateTimeFilter
}

input PaymentWhereUniqueInput {
  id: String
}

type Person {
  Ticket(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): [Ticket!]!
  _count: PersonCount
  age: Int
  createdAt: DateTime!
  email: String
  firstName: String!
  getMetadata(key: String!): String
  id: String!
  lastName: String!
  phone: String
  pronouns: String
  updatedAt: DateTime!
  username: String
}

type PersonAvgAggregate {
  age: Float
}

input PersonAvgOrderByAggregateInput {
  age: SortOrder
}

type PersonCount {
  Ticket: Int!
}

type PersonCountAggregate {
  _all: Int!
  age: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  metadata: Int!
  phone: Int!
  pronouns: Int!
  updatedAt: Int!
  username: Int!
}

input PersonCountOrderByAggregateInput {
  age: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  metadata: SortOrder
  phone: SortOrder
  pronouns: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input PersonCreateInput {
  Ticket: TicketCreateNestedManyWithoutGuardianInput
  age: Int
  createdAt: DateTime
  email: String
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  phone: String
  pronouns: String
  updatedAt: DateTime
  username: String
}

input PersonCreateManyInput {
  age: Int
  createdAt: DateTime
  email: String
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  phone: String
  pronouns: String
  updatedAt: DateTime
  username: String
}

input PersonCreateNestedOneWithoutTicketInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutTicketInput
  create: PersonCreateWithoutTicketInput
}

input PersonCreateOrConnectWithoutTicketInput {
  create: PersonCreateWithoutTicketInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateWithoutTicketInput {
  age: Int
  createdAt: DateTime
  email: String
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  phone: String
  pronouns: String
  updatedAt: DateTime
  username: String
}

type PersonGroupBy {
  _avg: PersonAvgAggregate
  _count: PersonCountAggregate
  _max: PersonMaxAggregate
  _min: PersonMinAggregate
  _sum: PersonSumAggregate
  age: Int
  createdAt: DateTime!
  email: String
  firstName: String!
  id: String!
  lastName: String!
  metadata: JSON
  phone: String
  pronouns: String
  updatedAt: DateTime!
  username: String
}

type PersonMaxAggregate {
  age: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  phone: String
  pronouns: String
  updatedAt: DateTime
  username: String
}

input PersonMaxOrderByAggregateInput {
  age: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  phone: SortOrder
  pronouns: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

type PersonMinAggregate {
  age: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  phone: String
  pronouns: String
  updatedAt: DateTime
  username: String
}

input PersonMinOrderByAggregateInput {
  age: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  phone: SortOrder
  pronouns: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input PersonOrderByWithAggregationInput {
  _avg: PersonAvgOrderByAggregateInput
  _count: PersonCountOrderByAggregateInput
  _max: PersonMaxOrderByAggregateInput
  _min: PersonMinOrderByAggregateInput
  _sum: PersonSumOrderByAggregateInput
  age: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  metadata: SortOrder
  phone: SortOrder
  pronouns: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input PersonOrderByWithRelationInput {
  Ticket: TicketOrderByRelationAggregateInput
  age: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  metadata: SortOrder
  phone: SortOrder
  pronouns: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input PersonRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

enum PersonScalarFieldEnum {
  age
  createdAt
  email
  firstName
  id
  lastName
  metadata
  phone
  pronouns
  updatedAt
  username
}

input PersonScalarWhereWithAggregatesInput {
  AND: [PersonScalarWhereWithAggregatesInput!]
  NOT: [PersonScalarWhereWithAggregatesInput!]
  OR: [PersonScalarWhereWithAggregatesInput!]
  age: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  phone: StringNullableWithAggregatesFilter
  pronouns: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  username: StringNullableWithAggregatesFilter
}

type PersonSumAggregate {
  age: Int
}

input PersonSumOrderByAggregateInput {
  age: SortOrder
}

input PersonUpdateInput {
  Ticket: TicketUpdateManyWithoutGuardianInput
  age: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  phone: NullableStringFieldUpdateOperationsInput
  pronouns: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input PersonUpdateManyMutationInput {
  age: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  phone: NullableStringFieldUpdateOperationsInput
  pronouns: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input PersonUpdateOneWithoutTicketInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutTicketInput
  create: PersonCreateWithoutTicketInput
  delete: Boolean
  disconnect: Boolean
  update: PersonUpdateWithoutTicketInput
  upsert: PersonUpsertWithoutTicketInput
}

input PersonUpdateWithoutTicketInput {
  age: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  phone: NullableStringFieldUpdateOperationsInput
  pronouns: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input PersonUpsertWithoutTicketInput {
  create: PersonCreateWithoutTicketInput!
  update: PersonUpdateWithoutTicketInput!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  Ticket: TicketListRelationFilter
  age: IntNullableFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  metadata: JsonNullableFilter
  phone: StringNullableFilter
  pronouns: StringNullableFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
}

input PersonWhereUniqueInput {
  id: String
}

type PromoCode {
  _count: PromoCodeCount
  amount: Float!
  code: String!
  createdAt: DateTime!
  event: Event
  eventGroup: EventGroup
  eventGroupId: String
  eventId: String
  getMetadata(key: String!): String
  id: String!
  tickets(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): [Ticket!]!
  type: DiscountType!
  updatedAt: DateTime!
  uses: Int
  usesRemaining: Float
}

type PromoCodeAvgAggregate {
  amount: Float
  uses: Float
}

input PromoCodeAvgOrderByAggregateInput {
  amount: SortOrder
  uses: SortOrder
}

type PromoCodeCount {
  tickets: Int!
}

type PromoCodeCountAggregate {
  _all: Int!
  amount: Int!
  code: Int!
  createdAt: Int!
  eventGroupId: Int!
  eventId: Int!
  id: Int!
  metadata: Int!
  type: Int!
  updatedAt: Int!
  uses: Int!
}

input PromoCodeCountOrderByAggregateInput {
  amount: SortOrder
  code: SortOrder
  createdAt: SortOrder
  eventGroupId: SortOrder
  eventId: SortOrder
  id: SortOrder
  metadata: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  uses: SortOrder
}

input PromoCodeCreateInput {
  amount: Float!
  code: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPromoCodesInput
  eventGroup: EventGroupCreateNestedOneWithoutPromoCodesInput
  id: String
  metadata: JSON
  tickets: TicketCreateNestedManyWithoutPromoCodeInput
  type: DiscountType!
  updatedAt: DateTime
  uses: Int
}

input PromoCodeCreateManyEventGroupInput {
  amount: Float!
  code: String!
  createdAt: DateTime
  eventId: String
  id: String
  metadata: JSON
  type: DiscountType!
  updatedAt: DateTime
  uses: Int
}

input PromoCodeCreateManyEventGroupInputEnvelope {
  data: [PromoCodeCreateManyEventGroupInput!]!
  skipDuplicates: Boolean
}

input PromoCodeCreateManyEventInput {
  amount: Float!
  code: String!
  createdAt: DateTime
  eventGroupId: String
  id: String
  metadata: JSON
  type: DiscountType!
  updatedAt: DateTime
  uses: Int
}

input PromoCodeCreateManyEventInputEnvelope {
  data: [PromoCodeCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input PromoCodeCreateManyInput {
  amount: Float!
  code: String!
  createdAt: DateTime
  eventGroupId: String
  eventId: String
  id: String
  metadata: JSON
  type: DiscountType!
  updatedAt: DateTime
  uses: Int
}

input PromoCodeCreateNestedManyWithoutEventGroupInput {
  connect: [PromoCodeWhereUniqueInput!]
  connectOrCreate: [PromoCodeCreateOrConnectWithoutEventGroupInput!]
  create: [PromoCodeCreateWithoutEventGroupInput!]
  createMany: PromoCodeCreateManyEventGroupInputEnvelope
}

input PromoCodeCreateNestedManyWithoutEventInput {
  connect: [PromoCodeWhereUniqueInput!]
  connectOrCreate: [PromoCodeCreateOrConnectWithoutEventInput!]
  create: [PromoCodeCreateWithoutEventInput!]
  createMany: PromoCodeCreateManyEventInputEnvelope
}

input PromoCodeCreateNestedOneWithoutTicketsInput {
  connect: PromoCodeWhereUniqueInput
  connectOrCreate: PromoCodeCreateOrConnectWithoutTicketsInput
  create: PromoCodeCreateWithoutTicketsInput
}

input PromoCodeCreateOrConnectWithoutEventGroupInput {
  create: PromoCodeCreateWithoutEventGroupInput!
  where: PromoCodeWhereUniqueInput!
}

input PromoCodeCreateOrConnectWithoutEventInput {
  create: PromoCodeCreateWithoutEventInput!
  where: PromoCodeWhereUniqueInput!
}

input PromoCodeCreateOrConnectWithoutTicketsInput {
  create: PromoCodeCreateWithoutTicketsInput!
  where: PromoCodeWhereUniqueInput!
}

input PromoCodeCreateWithoutEventGroupInput {
  amount: Float!
  code: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPromoCodesInput
  id: String
  metadata: JSON
  tickets: TicketCreateNestedManyWithoutPromoCodeInput
  type: DiscountType!
  updatedAt: DateTime
  uses: Int
}

input PromoCodeCreateWithoutEventInput {
  amount: Float!
  code: String!
  createdAt: DateTime
  eventGroup: EventGroupCreateNestedOneWithoutPromoCodesInput
  id: String
  metadata: JSON
  tickets: TicketCreateNestedManyWithoutPromoCodeInput
  type: DiscountType!
  updatedAt: DateTime
  uses: Int
}

input PromoCodeCreateWithoutTicketsInput {
  amount: Float!
  code: String!
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPromoCodesInput
  eventGroup: EventGroupCreateNestedOneWithoutPromoCodesInput
  id: String
  metadata: JSON
  type: DiscountType!
  updatedAt: DateTime
  uses: Int
}

type PromoCodeGroupBy {
  _avg: PromoCodeAvgAggregate
  _count: PromoCodeCountAggregate
  _max: PromoCodeMaxAggregate
  _min: PromoCodeMinAggregate
  _sum: PromoCodeSumAggregate
  amount: Float!
  code: String!
  createdAt: DateTime!
  eventGroupId: String
  eventId: String
  id: String!
  metadata: JSON
  type: DiscountType!
  updatedAt: DateTime!
  uses: Int
}

input PromoCodeListRelationFilter {
  every: PromoCodeWhereInput
  none: PromoCodeWhereInput
  some: PromoCodeWhereInput
}

type PromoCodeMaxAggregate {
  amount: Float
  code: String
  createdAt: DateTime
  eventGroupId: String
  eventId: String
  id: String
  type: DiscountType
  updatedAt: DateTime
  uses: Int
}

input PromoCodeMaxOrderByAggregateInput {
  amount: SortOrder
  code: SortOrder
  createdAt: SortOrder
  eventGroupId: SortOrder
  eventId: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  uses: SortOrder
}

type PromoCodeMinAggregate {
  amount: Float
  code: String
  createdAt: DateTime
  eventGroupId: String
  eventId: String
  id: String
  type: DiscountType
  updatedAt: DateTime
  uses: Int
}

input PromoCodeMinOrderByAggregateInput {
  amount: SortOrder
  code: SortOrder
  createdAt: SortOrder
  eventGroupId: SortOrder
  eventId: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  uses: SortOrder
}

input PromoCodeOrderByRelationAggregateInput {
  _count: SortOrder
}

input PromoCodeOrderByWithAggregationInput {
  _avg: PromoCodeAvgOrderByAggregateInput
  _count: PromoCodeCountOrderByAggregateInput
  _max: PromoCodeMaxOrderByAggregateInput
  _min: PromoCodeMinOrderByAggregateInput
  _sum: PromoCodeSumOrderByAggregateInput
  amount: SortOrder
  code: SortOrder
  createdAt: SortOrder
  eventGroupId: SortOrder
  eventId: SortOrder
  id: SortOrder
  metadata: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  uses: SortOrder
}

input PromoCodeOrderByWithRelationInput {
  amount: SortOrder
  code: SortOrder
  createdAt: SortOrder
  event: EventOrderByWithRelationInput
  eventGroup: EventGroupOrderByWithRelationInput
  eventGroupId: SortOrder
  eventId: SortOrder
  id: SortOrder
  metadata: SortOrder
  tickets: TicketOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
  uses: SortOrder
}

input PromoCodeRelationFilter {
  is: PromoCodeWhereInput
  isNot: PromoCodeWhereInput
}

enum PromoCodeScalarFieldEnum {
  amount
  code
  createdAt
  eventGroupId
  eventId
  id
  metadata
  type
  updatedAt
  uses
}

input PromoCodeScalarWhereInput {
  AND: [PromoCodeScalarWhereInput!]
  NOT: [PromoCodeScalarWhereInput!]
  OR: [PromoCodeScalarWhereInput!]
  amount: FloatFilter
  code: StringFilter
  createdAt: DateTimeFilter
  eventGroupId: StringNullableFilter
  eventId: StringNullableFilter
  id: StringFilter
  metadata: JsonNullableFilter
  type: EnumDiscountTypeFilter
  updatedAt: DateTimeFilter
  uses: IntNullableFilter
}

input PromoCodeScalarWhereWithAggregatesInput {
  AND: [PromoCodeScalarWhereWithAggregatesInput!]
  NOT: [PromoCodeScalarWhereWithAggregatesInput!]
  OR: [PromoCodeScalarWhereWithAggregatesInput!]
  amount: FloatWithAggregatesFilter
  code: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  eventGroupId: StringNullableWithAggregatesFilter
  eventId: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  type: EnumDiscountTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  uses: IntNullableWithAggregatesFilter
}

type PromoCodeSumAggregate {
  amount: Float
  uses: Int
}

input PromoCodeSumOrderByAggregateInput {
  amount: SortOrder
  uses: SortOrder
}

input PromoCodeUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutPromoCodesInput
  eventGroup: EventGroupUpdateOneWithoutPromoCodesInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  tickets: TicketUpdateManyWithoutPromoCodeInput
  type: EnumDiscountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uses: NullableIntFieldUpdateOperationsInput
}

input PromoCodeUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  type: EnumDiscountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uses: NullableIntFieldUpdateOperationsInput
}

input PromoCodeUpdateManyWithWhereWithoutEventGroupInput {
  data: PromoCodeUpdateManyMutationInput!
  where: PromoCodeScalarWhereInput!
}

input PromoCodeUpdateManyWithWhereWithoutEventInput {
  data: PromoCodeUpdateManyMutationInput!
  where: PromoCodeScalarWhereInput!
}

input PromoCodeUpdateManyWithoutEventGroupInput {
  connect: [PromoCodeWhereUniqueInput!]
  connectOrCreate: [PromoCodeCreateOrConnectWithoutEventGroupInput!]
  create: [PromoCodeCreateWithoutEventGroupInput!]
  createMany: PromoCodeCreateManyEventGroupInputEnvelope
  delete: [PromoCodeWhereUniqueInput!]
  deleteMany: [PromoCodeScalarWhereInput!]
  disconnect: [PromoCodeWhereUniqueInput!]
  set: [PromoCodeWhereUniqueInput!]
  update: [PromoCodeUpdateWithWhereUniqueWithoutEventGroupInput!]
  updateMany: [PromoCodeUpdateManyWithWhereWithoutEventGroupInput!]
  upsert: [PromoCodeUpsertWithWhereUniqueWithoutEventGroupInput!]
}

input PromoCodeUpdateManyWithoutEventInput {
  connect: [PromoCodeWhereUniqueInput!]
  connectOrCreate: [PromoCodeCreateOrConnectWithoutEventInput!]
  create: [PromoCodeCreateWithoutEventInput!]
  createMany: PromoCodeCreateManyEventInputEnvelope
  delete: [PromoCodeWhereUniqueInput!]
  deleteMany: [PromoCodeScalarWhereInput!]
  disconnect: [PromoCodeWhereUniqueInput!]
  set: [PromoCodeWhereUniqueInput!]
  update: [PromoCodeUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [PromoCodeUpdateManyWithWhereWithoutEventInput!]
  upsert: [PromoCodeUpsertWithWhereUniqueWithoutEventInput!]
}

input PromoCodeUpdateOneWithoutTicketsInput {
  connect: PromoCodeWhereUniqueInput
  connectOrCreate: PromoCodeCreateOrConnectWithoutTicketsInput
  create: PromoCodeCreateWithoutTicketsInput
  delete: Boolean
  disconnect: Boolean
  update: PromoCodeUpdateWithoutTicketsInput
  upsert: PromoCodeUpsertWithoutTicketsInput
}

input PromoCodeUpdateWithWhereUniqueWithoutEventGroupInput {
  data: PromoCodeUpdateWithoutEventGroupInput!
  where: PromoCodeWhereUniqueInput!
}

input PromoCodeUpdateWithWhereUniqueWithoutEventInput {
  data: PromoCodeUpdateWithoutEventInput!
  where: PromoCodeWhereUniqueInput!
}

input PromoCodeUpdateWithoutEventGroupInput {
  amount: FloatFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutPromoCodesInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  tickets: TicketUpdateManyWithoutPromoCodeInput
  type: EnumDiscountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uses: NullableIntFieldUpdateOperationsInput
}

input PromoCodeUpdateWithoutEventInput {
  amount: FloatFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneWithoutPromoCodesInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  tickets: TicketUpdateManyWithoutPromoCodeInput
  type: EnumDiscountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uses: NullableIntFieldUpdateOperationsInput
}

input PromoCodeUpdateWithoutTicketsInput {
  amount: FloatFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutPromoCodesInput
  eventGroup: EventGroupUpdateOneWithoutPromoCodesInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  type: EnumDiscountTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  uses: NullableIntFieldUpdateOperationsInput
}

input PromoCodeUpsertWithWhereUniqueWithoutEventGroupInput {
  create: PromoCodeCreateWithoutEventGroupInput!
  update: PromoCodeUpdateWithoutEventGroupInput!
  where: PromoCodeWhereUniqueInput!
}

input PromoCodeUpsertWithWhereUniqueWithoutEventInput {
  create: PromoCodeCreateWithoutEventInput!
  update: PromoCodeUpdateWithoutEventInput!
  where: PromoCodeWhereUniqueInput!
}

input PromoCodeUpsertWithoutTicketsInput {
  create: PromoCodeCreateWithoutTicketsInput!
  update: PromoCodeUpdateWithoutTicketsInput!
}

input PromoCodeWhereInput {
  AND: [PromoCodeWhereInput!]
  NOT: [PromoCodeWhereInput!]
  OR: [PromoCodeWhereInput!]
  amount: FloatFilter
  code: StringFilter
  createdAt: DateTimeFilter
  event: EventRelationFilter
  eventGroup: EventGroupRelationFilter
  eventGroupId: StringNullableFilter
  eventId: StringNullableFilter
  id: StringFilter
  metadata: JsonNullableFilter
  tickets: TicketListRelationFilter
  type: EnumDiscountTypeFilter
  updatedAt: DateTimeFilter
  uses: IntNullableFilter
}

input PromoCodeWhereUniqueInput {
  id: String
}

type Query {
  aggregateEmailTemplate(cursor: EmailTemplateWhereUniqueInput, orderBy: [EmailTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: EmailTemplateWhereInput): AggregateEmailTemplate!
  aggregateEvent(cursor: EventWhereUniqueInput, orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): AggregateEvent!
  aggregateEventGroup(cursor: EventGroupWhereUniqueInput, orderBy: [EventGroupOrderByWithRelationInput!], skip: Int, take: Int, where: EventGroupWhereInput): AggregateEventGroup!
  aggregateEventRestriction(cursor: EventRestrictionWhereUniqueInput, orderBy: [EventRestrictionOrderByWithRelationInput!], skip: Int, take: Int, where: EventRestrictionWhereInput): AggregateEventRestriction!
  aggregateMailingListMember(cursor: MailingListMemberWhereUniqueInput, orderBy: [MailingListMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MailingListMemberWhereInput): AggregateMailingListMember!
  aggregatePayment(cursor: PaymentWhereUniqueInput, orderBy: [PaymentOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentWhereInput): AggregatePayment!
  aggregatePerson(cursor: PersonWhereUniqueInput, orderBy: [PersonOrderByWithRelationInput!], skip: Int, take: Int, where: PersonWhereInput): AggregatePerson!
  aggregatePromoCode(cursor: PromoCodeWhereUniqueInput, orderBy: [PromoCodeOrderByWithRelationInput!], skip: Int, take: Int, where: PromoCodeWhereInput): AggregatePromoCode!
  aggregateScheduleItem(cursor: ScheduleItemWhereUniqueInput, orderBy: [ScheduleItemOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleItemWhereInput): AggregateScheduleItem!
  aggregateSponsor(cursor: SponsorWhereUniqueInput, orderBy: [SponsorOrderByWithRelationInput!], skip: Int, take: Int, where: SponsorWhereInput): AggregateSponsor!
  aggregateTicket(cursor: TicketWhereUniqueInput, orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): AggregateTicket!
  aggregateVenue(cursor: VenueWhereUniqueInput, orderBy: [VenueOrderByWithRelationInput!], skip: Int, take: Int, where: VenueWhereInput): AggregateVenue!
  emailTemplate(where: EmailTemplateWhereUniqueInput!): EmailTemplate
  emailTemplates(cursor: EmailTemplateWhereUniqueInput, distinct: [EmailTemplateScalarFieldEnum!], orderBy: [EmailTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: EmailTemplateWhereInput): [EmailTemplate!]!
  event(where: EventWhereUniqueInput!): Event
  eventGroup(where: EventGroupWhereUniqueInput!): EventGroup
  eventGroups(cursor: EventGroupWhereUniqueInput, distinct: [EventGroupScalarFieldEnum!], orderBy: [EventGroupOrderByWithRelationInput!], skip: Int, take: Int, where: EventGroupWhereInput): [EventGroup!]!
  eventRestriction(where: EventRestrictionWhereUniqueInput!): EventRestriction
  eventRestrictions(cursor: EventRestrictionWhereUniqueInput, distinct: [EventRestrictionScalarFieldEnum!], orderBy: [EventRestrictionOrderByWithRelationInput!], skip: Int, take: Int, where: EventRestrictionWhereInput): [EventRestriction!]!
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], editable: Boolean, orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  findFirstEmailTemplate(cursor: EmailTemplateWhereUniqueInput, distinct: [EmailTemplateScalarFieldEnum!], orderBy: [EmailTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: EmailTemplateWhereInput): EmailTemplate
  findFirstEvent(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): Event
  findFirstEventGroup(cursor: EventGroupWhereUniqueInput, distinct: [EventGroupScalarFieldEnum!], orderBy: [EventGroupOrderByWithRelationInput!], skip: Int, take: Int, where: EventGroupWhereInput): EventGroup
  findFirstEventRestriction(cursor: EventRestrictionWhereUniqueInput, distinct: [EventRestrictionScalarFieldEnum!], orderBy: [EventRestrictionOrderByWithRelationInput!], skip: Int, take: Int, where: EventRestrictionWhereInput): EventRestriction
  findFirstMailingListMember(cursor: MailingListMemberWhereUniqueInput, distinct: [MailingListMemberScalarFieldEnum!], orderBy: [MailingListMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MailingListMemberWhereInput): MailingListMember
  findFirstPayment(cursor: PaymentWhereUniqueInput, distinct: [PaymentScalarFieldEnum!], orderBy: [PaymentOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentWhereInput): Payment
  findFirstPerson(cursor: PersonWhereUniqueInput, distinct: [PersonScalarFieldEnum!], orderBy: [PersonOrderByWithRelationInput!], skip: Int, take: Int, where: PersonWhereInput): Person
  findFirstPromoCode(cursor: PromoCodeWhereUniqueInput, distinct: [PromoCodeScalarFieldEnum!], orderBy: [PromoCodeOrderByWithRelationInput!], skip: Int, take: Int, where: PromoCodeWhereInput): PromoCode
  findFirstScheduleItem(cursor: ScheduleItemWhereUniqueInput, distinct: [ScheduleItemScalarFieldEnum!], orderBy: [ScheduleItemOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleItemWhereInput): ScheduleItem
  findFirstSponsor(cursor: SponsorWhereUniqueInput, distinct: [SponsorScalarFieldEnum!], orderBy: [SponsorOrderByWithRelationInput!], skip: Int, take: Int, where: SponsorWhereInput): Sponsor
  findFirstTicket(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): Ticket
  findFirstVenue(cursor: VenueWhereUniqueInput, distinct: [VenueScalarFieldEnum!], orderBy: [VenueOrderByWithRelationInput!], skip: Int, take: Int, where: VenueWhereInput): Venue
  groupByEmailTemplate(by: [EmailTemplateScalarFieldEnum!]!, having: EmailTemplateScalarWhereWithAggregatesInput, orderBy: [EmailTemplateOrderByWithAggregationInput!], skip: Int, take: Int, where: EmailTemplateWhereInput): [EmailTemplateGroupBy!]!
  groupByEvent(by: [EventScalarFieldEnum!]!, having: EventScalarWhereWithAggregatesInput, orderBy: [EventOrderByWithAggregationInput!], skip: Int, take: Int, where: EventWhereInput): [EventGroupBy!]!
  groupByEventGroup(by: [EventGroupScalarFieldEnum!]!, having: EventGroupScalarWhereWithAggregatesInput, orderBy: [EventGroupOrderByWithAggregationInput!], skip: Int, take: Int, where: EventGroupWhereInput): [EventGroupGroupBy!]!
  groupByEventRestriction(by: [EventRestrictionScalarFieldEnum!]!, having: EventRestrictionScalarWhereWithAggregatesInput, orderBy: [EventRestrictionOrderByWithAggregationInput!], skip: Int, take: Int, where: EventRestrictionWhereInput): [EventRestrictionGroupBy!]!
  groupByMailingListMember(by: [MailingListMemberScalarFieldEnum!]!, having: MailingListMemberScalarWhereWithAggregatesInput, orderBy: [MailingListMemberOrderByWithAggregationInput!], skip: Int, take: Int, where: MailingListMemberWhereInput): [MailingListMemberGroupBy!]!
  groupByPayment(by: [PaymentScalarFieldEnum!]!, having: PaymentScalarWhereWithAggregatesInput, orderBy: [PaymentOrderByWithAggregationInput!], skip: Int, take: Int, where: PaymentWhereInput): [PaymentGroupBy!]!
  groupByPerson(by: [PersonScalarFieldEnum!]!, having: PersonScalarWhereWithAggregatesInput, orderBy: [PersonOrderByWithAggregationInput!], skip: Int, take: Int, where: PersonWhereInput): [PersonGroupBy!]!
  groupByPromoCode(by: [PromoCodeScalarFieldEnum!]!, having: PromoCodeScalarWhereWithAggregatesInput, orderBy: [PromoCodeOrderByWithAggregationInput!], skip: Int, take: Int, where: PromoCodeWhereInput): [PromoCodeGroupBy!]!
  groupByScheduleItem(by: [ScheduleItemScalarFieldEnum!]!, having: ScheduleItemScalarWhereWithAggregatesInput, orderBy: [ScheduleItemOrderByWithAggregationInput!], skip: Int, take: Int, where: ScheduleItemWhereInput): [ScheduleItemGroupBy!]!
  groupBySponsor(by: [SponsorScalarFieldEnum!]!, having: SponsorScalarWhereWithAggregatesInput, orderBy: [SponsorOrderByWithAggregationInput!], skip: Int, take: Int, where: SponsorWhereInput): [SponsorGroupBy!]!
  groupByTicket(by: [TicketScalarFieldEnum!]!, having: TicketScalarWhereWithAggregatesInput, orderBy: [TicketOrderByWithAggregationInput!], skip: Int, take: Int, where: TicketWhereInput): [TicketGroupBy!]!
  groupByVenue(by: [VenueScalarFieldEnum!]!, having: VenueScalarWhereWithAggregatesInput, orderBy: [VenueOrderByWithAggregationInput!], skip: Int, take: Int, where: VenueWhereInput): [VenueGroupBy!]!
  mailingListMember(where: MailingListMemberWhereUniqueInput!): MailingListMember
  mailingListMembers(cursor: MailingListMemberWhereUniqueInput, distinct: [MailingListMemberScalarFieldEnum!], orderBy: [MailingListMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MailingListMemberWhereInput): [MailingListMember!]!
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(cursor: PaymentWhereUniqueInput, distinct: [PaymentScalarFieldEnum!], orderBy: [PaymentOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentWhereInput): [Payment!]!
  people(cursor: PersonWhereUniqueInput, distinct: [PersonScalarFieldEnum!], orderBy: [PersonOrderByWithRelationInput!], skip: Int, take: Int, where: PersonWhereInput): [Person!]!
  person(where: PersonWhereUniqueInput!): Person
  promoCode(where: PromoCodeWhereUniqueInput!): PromoCode
  promoCodes(cursor: PromoCodeWhereUniqueInput, distinct: [PromoCodeScalarFieldEnum!], orderBy: [PromoCodeOrderByWithRelationInput!], skip: Int, take: Int, where: PromoCodeWhereInput): [PromoCode!]!
  scheduleItem(where: ScheduleItemWhereUniqueInput!): ScheduleItem
  scheduleItems(cursor: ScheduleItemWhereUniqueInput, distinct: [ScheduleItemScalarFieldEnum!], orderBy: [ScheduleItemOrderByWithRelationInput!], skip: Int, take: Int, where: ScheduleItemWhereInput): [ScheduleItem!]!
  sponsor(where: SponsorWhereUniqueInput!): Sponsor
  sponsors(cursor: SponsorWhereUniqueInput, distinct: [SponsorScalarFieldEnum!], orderBy: [SponsorOrderByWithRelationInput!], skip: Int, take: Int, where: SponsorWhereInput): [Sponsor!]!
  ticket(where: TicketWhereUniqueInput!): Ticket
  tickets(cursor: TicketWhereUniqueInput, distinct: [TicketScalarFieldEnum!], orderBy: [TicketOrderByWithRelationInput!], skip: Int, take: Int, where: TicketWhereInput): [Ticket!]!
  venue(where: VenueWhereUniqueInput!): Venue
  venues(cursor: VenueWhereUniqueInput, distinct: [VenueScalarFieldEnum!], orderBy: [VenueOrderByWithRelationInput!], skip: Int, take: Int, where: VenueWhereInput): [Venue!]!
}

enum QueryMode {
  default
  insensitive
}

type ScheduleItem {
  createdAt: DateTime!
  description: String
  displayTime: String!
  displayTimeWithDate: String!
  end: DateTime
  event: Event
  eventGroup: EventGroup
  eventGroupId: String
  eventId: String
  finalized: Boolean!
  getMetadata(key: String!): String
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String!
  internal: Boolean!
  link: String
  name: String!
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime!
  type: String!
  updatedAt: DateTime!
}

type ScheduleItemCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  end: Int!
  eventGroupId: Int!
  eventId: Int!
  finalized: Int!
  hostEmail: Int!
  hostName: Int!
  hostPronoun: Int!
  id: Int!
  internal: Int!
  link: Int!
  metadata: Int!
  name: Int!
  organizerEmail: Int!
  organizerName: Int!
  organizerPhone: Int!
  start: Int!
  type: Int!
  updatedAt: Int!
}

input ScheduleItemCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  end: SortOrder
  eventGroupId: SortOrder
  eventId: SortOrder
  finalized: SortOrder
  hostEmail: SortOrder
  hostName: SortOrder
  hostPronoun: SortOrder
  id: SortOrder
  internal: SortOrder
  link: SortOrder
  metadata: SortOrder
  name: SortOrder
  organizerEmail: SortOrder
  organizerName: SortOrder
  organizerPhone: SortOrder
  start: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input ScheduleItemCreateInput {
  createdAt: DateTime
  description: String
  end: DateTime
  event: EventCreateNestedOneWithoutScheduleInput
  eventGroup: EventGroupCreateNestedOneWithoutScheduleInput
  finalized: Boolean
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String
  internal: Boolean
  link: String
  metadata: JSON
  name: String!
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime!
  type: String
  updatedAt: DateTime
}

input ScheduleItemCreateManyEventGroupInput {
  createdAt: DateTime
  description: String
  end: DateTime
  eventId: String
  finalized: Boolean
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String
  internal: Boolean
  link: String
  metadata: JSON
  name: String!
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime!
  type: String
  updatedAt: DateTime
}

input ScheduleItemCreateManyEventGroupInputEnvelope {
  data: [ScheduleItemCreateManyEventGroupInput!]!
  skipDuplicates: Boolean
}

input ScheduleItemCreateManyEventInput {
  createdAt: DateTime
  description: String
  end: DateTime
  eventGroupId: String
  finalized: Boolean
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String
  internal: Boolean
  link: String
  metadata: JSON
  name: String!
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime!
  type: String
  updatedAt: DateTime
}

input ScheduleItemCreateManyEventInputEnvelope {
  data: [ScheduleItemCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input ScheduleItemCreateManyInput {
  createdAt: DateTime
  description: String
  end: DateTime
  eventGroupId: String
  eventId: String
  finalized: Boolean
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String
  internal: Boolean
  link: String
  metadata: JSON
  name: String!
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime!
  type: String
  updatedAt: DateTime
}

input ScheduleItemCreateNestedManyWithoutEventGroupInput {
  connect: [ScheduleItemWhereUniqueInput!]
  connectOrCreate: [ScheduleItemCreateOrConnectWithoutEventGroupInput!]
  create: [ScheduleItemCreateWithoutEventGroupInput!]
  createMany: ScheduleItemCreateManyEventGroupInputEnvelope
}

input ScheduleItemCreateNestedManyWithoutEventInput {
  connect: [ScheduleItemWhereUniqueInput!]
  connectOrCreate: [ScheduleItemCreateOrConnectWithoutEventInput!]
  create: [ScheduleItemCreateWithoutEventInput!]
  createMany: ScheduleItemCreateManyEventInputEnvelope
}

input ScheduleItemCreateOrConnectWithoutEventGroupInput {
  create: ScheduleItemCreateWithoutEventGroupInput!
  where: ScheduleItemWhereUniqueInput!
}

input ScheduleItemCreateOrConnectWithoutEventInput {
  create: ScheduleItemCreateWithoutEventInput!
  where: ScheduleItemWhereUniqueInput!
}

input ScheduleItemCreateWithoutEventGroupInput {
  createdAt: DateTime
  description: String
  end: DateTime
  event: EventCreateNestedOneWithoutScheduleInput
  finalized: Boolean
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String
  internal: Boolean
  link: String
  metadata: JSON
  name: String!
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime!
  type: String
  updatedAt: DateTime
}

input ScheduleItemCreateWithoutEventInput {
  createdAt: DateTime
  description: String
  end: DateTime
  eventGroup: EventGroupCreateNestedOneWithoutScheduleInput
  finalized: Boolean
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String
  internal: Boolean
  link: String
  metadata: JSON
  name: String!
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime!
  type: String
  updatedAt: DateTime
}

type ScheduleItemGroupBy {
  _count: ScheduleItemCountAggregate
  _max: ScheduleItemMaxAggregate
  _min: ScheduleItemMinAggregate
  createdAt: DateTime!
  description: String
  end: DateTime
  eventGroupId: String
  eventId: String
  finalized: Boolean!
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String!
  internal: Boolean!
  link: String
  metadata: JSON
  name: String!
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime!
  type: String!
  updatedAt: DateTime!
}

input ScheduleItemListRelationFilter {
  every: ScheduleItemWhereInput
  none: ScheduleItemWhereInput
  some: ScheduleItemWhereInput
}

type ScheduleItemMaxAggregate {
  createdAt: DateTime
  description: String
  end: DateTime
  eventGroupId: String
  eventId: String
  finalized: Boolean
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String
  internal: Boolean
  link: String
  name: String
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime
  type: String
  updatedAt: DateTime
}

input ScheduleItemMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  end: SortOrder
  eventGroupId: SortOrder
  eventId: SortOrder
  finalized: SortOrder
  hostEmail: SortOrder
  hostName: SortOrder
  hostPronoun: SortOrder
  id: SortOrder
  internal: SortOrder
  link: SortOrder
  name: SortOrder
  organizerEmail: SortOrder
  organizerName: SortOrder
  organizerPhone: SortOrder
  start: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

type ScheduleItemMinAggregate {
  createdAt: DateTime
  description: String
  end: DateTime
  eventGroupId: String
  eventId: String
  finalized: Boolean
  hostEmail: String
  hostName: String
  hostPronoun: String
  id: String
  internal: Boolean
  link: String
  name: String
  organizerEmail: String
  organizerName: String
  organizerPhone: String
  start: DateTime
  type: String
  updatedAt: DateTime
}

input ScheduleItemMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  end: SortOrder
  eventGroupId: SortOrder
  eventId: SortOrder
  finalized: SortOrder
  hostEmail: SortOrder
  hostName: SortOrder
  hostPronoun: SortOrder
  id: SortOrder
  internal: SortOrder
  link: SortOrder
  name: SortOrder
  organizerEmail: SortOrder
  organizerName: SortOrder
  organizerPhone: SortOrder
  start: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input ScheduleItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ScheduleItemOrderByWithAggregationInput {
  _count: ScheduleItemCountOrderByAggregateInput
  _max: ScheduleItemMaxOrderByAggregateInput
  _min: ScheduleItemMinOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  end: SortOrder
  eventGroupId: SortOrder
  eventId: SortOrder
  finalized: SortOrder
  hostEmail: SortOrder
  hostName: SortOrder
  hostPronoun: SortOrder
  id: SortOrder
  internal: SortOrder
  link: SortOrder
  metadata: SortOrder
  name: SortOrder
  organizerEmail: SortOrder
  organizerName: SortOrder
  organizerPhone: SortOrder
  start: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input ScheduleItemOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  end: SortOrder
  event: EventOrderByWithRelationInput
  eventGroup: EventGroupOrderByWithRelationInput
  eventGroupId: SortOrder
  eventId: SortOrder
  finalized: SortOrder
  hostEmail: SortOrder
  hostName: SortOrder
  hostPronoun: SortOrder
  id: SortOrder
  internal: SortOrder
  link: SortOrder
  metadata: SortOrder
  name: SortOrder
  organizerEmail: SortOrder
  organizerName: SortOrder
  organizerPhone: SortOrder
  start: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum ScheduleItemScalarFieldEnum {
  createdAt
  description
  end
  eventGroupId
  eventId
  finalized
  hostEmail
  hostName
  hostPronoun
  id
  internal
  link
  metadata
  name
  organizerEmail
  organizerName
  organizerPhone
  start
  type
  updatedAt
}

input ScheduleItemScalarWhereInput {
  AND: [ScheduleItemScalarWhereInput!]
  NOT: [ScheduleItemScalarWhereInput!]
  OR: [ScheduleItemScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  end: DateTimeNullableFilter
  eventGroupId: StringNullableFilter
  eventId: StringNullableFilter
  finalized: BoolFilter
  hostEmail: StringNullableFilter
  hostName: StringNullableFilter
  hostPronoun: StringNullableFilter
  id: StringFilter
  internal: BoolFilter
  link: StringNullableFilter
  metadata: JsonNullableFilter
  name: StringFilter
  organizerEmail: StringNullableFilter
  organizerName: StringNullableFilter
  organizerPhone: StringNullableFilter
  start: DateTimeFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input ScheduleItemScalarWhereWithAggregatesInput {
  AND: [ScheduleItemScalarWhereWithAggregatesInput!]
  NOT: [ScheduleItemScalarWhereWithAggregatesInput!]
  OR: [ScheduleItemScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  end: DateTimeNullableWithAggregatesFilter
  eventGroupId: StringNullableWithAggregatesFilter
  eventId: StringNullableWithAggregatesFilter
  finalized: BoolWithAggregatesFilter
  hostEmail: StringNullableWithAggregatesFilter
  hostName: StringNullableWithAggregatesFilter
  hostPronoun: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  internal: BoolWithAggregatesFilter
  link: StringNullableWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  organizerEmail: StringNullableWithAggregatesFilter
  organizerName: StringNullableWithAggregatesFilter
  organizerPhone: StringNullableWithAggregatesFilter
  start: DateTimeWithAggregatesFilter
  type: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ScheduleItemUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutScheduleInput
  eventGroup: EventGroupUpdateOneWithoutScheduleInput
  finalized: BoolFieldUpdateOperationsInput
  hostEmail: NullableStringFieldUpdateOperationsInput
  hostName: NullableStringFieldUpdateOperationsInput
  hostPronoun: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  internal: BoolFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  organizerEmail: NullableStringFieldUpdateOperationsInput
  organizerName: NullableStringFieldUpdateOperationsInput
  organizerPhone: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScheduleItemUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  finalized: BoolFieldUpdateOperationsInput
  hostEmail: NullableStringFieldUpdateOperationsInput
  hostName: NullableStringFieldUpdateOperationsInput
  hostPronoun: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  internal: BoolFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  organizerEmail: NullableStringFieldUpdateOperationsInput
  organizerName: NullableStringFieldUpdateOperationsInput
  organizerPhone: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScheduleItemUpdateManyWithWhereWithoutEventGroupInput {
  data: ScheduleItemUpdateManyMutationInput!
  where: ScheduleItemScalarWhereInput!
}

input ScheduleItemUpdateManyWithWhereWithoutEventInput {
  data: ScheduleItemUpdateManyMutationInput!
  where: ScheduleItemScalarWhereInput!
}

input ScheduleItemUpdateManyWithoutEventGroupInput {
  connect: [ScheduleItemWhereUniqueInput!]
  connectOrCreate: [ScheduleItemCreateOrConnectWithoutEventGroupInput!]
  create: [ScheduleItemCreateWithoutEventGroupInput!]
  createMany: ScheduleItemCreateManyEventGroupInputEnvelope
  delete: [ScheduleItemWhereUniqueInput!]
  deleteMany: [ScheduleItemScalarWhereInput!]
  disconnect: [ScheduleItemWhereUniqueInput!]
  set: [ScheduleItemWhereUniqueInput!]
  update: [ScheduleItemUpdateWithWhereUniqueWithoutEventGroupInput!]
  updateMany: [ScheduleItemUpdateManyWithWhereWithoutEventGroupInput!]
  upsert: [ScheduleItemUpsertWithWhereUniqueWithoutEventGroupInput!]
}

input ScheduleItemUpdateManyWithoutEventInput {
  connect: [ScheduleItemWhereUniqueInput!]
  connectOrCreate: [ScheduleItemCreateOrConnectWithoutEventInput!]
  create: [ScheduleItemCreateWithoutEventInput!]
  createMany: ScheduleItemCreateManyEventInputEnvelope
  delete: [ScheduleItemWhereUniqueInput!]
  deleteMany: [ScheduleItemScalarWhereInput!]
  disconnect: [ScheduleItemWhereUniqueInput!]
  set: [ScheduleItemWhereUniqueInput!]
  update: [ScheduleItemUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [ScheduleItemUpdateManyWithWhereWithoutEventInput!]
  upsert: [ScheduleItemUpsertWithWhereUniqueWithoutEventInput!]
}

input ScheduleItemUpdateWithWhereUniqueWithoutEventGroupInput {
  data: ScheduleItemUpdateWithoutEventGroupInput!
  where: ScheduleItemWhereUniqueInput!
}

input ScheduleItemUpdateWithWhereUniqueWithoutEventInput {
  data: ScheduleItemUpdateWithoutEventInput!
  where: ScheduleItemWhereUniqueInput!
}

input ScheduleItemUpdateWithoutEventGroupInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutScheduleInput
  finalized: BoolFieldUpdateOperationsInput
  hostEmail: NullableStringFieldUpdateOperationsInput
  hostName: NullableStringFieldUpdateOperationsInput
  hostPronoun: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  internal: BoolFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  organizerEmail: NullableStringFieldUpdateOperationsInput
  organizerName: NullableStringFieldUpdateOperationsInput
  organizerPhone: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScheduleItemUpdateWithoutEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  end: NullableDateTimeFieldUpdateOperationsInput
  eventGroup: EventGroupUpdateOneWithoutScheduleInput
  finalized: BoolFieldUpdateOperationsInput
  hostEmail: NullableStringFieldUpdateOperationsInput
  hostName: NullableStringFieldUpdateOperationsInput
  hostPronoun: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  internal: BoolFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  organizerEmail: NullableStringFieldUpdateOperationsInput
  organizerName: NullableStringFieldUpdateOperationsInput
  organizerPhone: NullableStringFieldUpdateOperationsInput
  start: DateTimeFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ScheduleItemUpsertWithWhereUniqueWithoutEventGroupInput {
  create: ScheduleItemCreateWithoutEventGroupInput!
  update: ScheduleItemUpdateWithoutEventGroupInput!
  where: ScheduleItemWhereUniqueInput!
}

input ScheduleItemUpsertWithWhereUniqueWithoutEventInput {
  create: ScheduleItemCreateWithoutEventInput!
  update: ScheduleItemUpdateWithoutEventInput!
  where: ScheduleItemWhereUniqueInput!
}

input ScheduleItemWhereInput {
  AND: [ScheduleItemWhereInput!]
  NOT: [ScheduleItemWhereInput!]
  OR: [ScheduleItemWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  end: DateTimeNullableFilter
  event: EventRelationFilter
  eventGroup: EventGroupRelationFilter
  eventGroupId: StringNullableFilter
  eventId: StringNullableFilter
  finalized: BoolFilter
  hostEmail: StringNullableFilter
  hostName: StringNullableFilter
  hostPronoun: StringNullableFilter
  id: StringFilter
  internal: BoolFilter
  link: StringNullableFilter
  metadata: JsonNullableFilter
  name: StringFilter
  organizerEmail: StringNullableFilter
  organizerName: StringNullableFilter
  organizerPhone: StringNullableFilter
  start: DateTimeFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input ScheduleItemWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

type Sponsor {
  amount: Int!
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime!
  darkLogoImageUri: String
  description: String
  event: Event
  eventId: String
  getMetadata(key: String!): String
  id: String!
  link: String
  logoImageUri: String
  name: String!
  perks: String
  updatedAt: DateTime!
}

type SponsorAvgAggregate {
  amount: Float
}

input SponsorAvgOrderByAggregateInput {
  amount: SortOrder
}

type SponsorCountAggregate {
  _all: Int!
  amount: Int!
  contactEmail: Int!
  contactName: Int!
  contactPhone: Int!
  createdAt: Int!
  darkLogoImageUri: Int!
  description: Int!
  eventId: Int!
  id: Int!
  link: Int!
  logoImageUri: Int!
  metadata: Int!
  name: Int!
  perks: Int!
  updatedAt: Int!
}

input SponsorCountOrderByAggregateInput {
  amount: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  darkLogoImageUri: SortOrder
  description: SortOrder
  eventId: SortOrder
  id: SortOrder
  link: SortOrder
  logoImageUri: SortOrder
  metadata: SortOrder
  name: SortOrder
  perks: SortOrder
  updatedAt: SortOrder
}

input SponsorCreateInput {
  amount: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  darkLogoImageUri: String
  description: String
  event: EventCreateNestedOneWithoutSponsorsInput
  id: String
  link: String
  logoImageUri: String
  metadata: JSON
  name: String!
  perks: String
  updatedAt: DateTime
}

input SponsorCreateManyEventInput {
  amount: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  darkLogoImageUri: String
  description: String
  id: String
  link: String
  logoImageUri: String
  metadata: JSON
  name: String!
  perks: String
  updatedAt: DateTime
}

input SponsorCreateManyEventInputEnvelope {
  data: [SponsorCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input SponsorCreateManyInput {
  amount: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  darkLogoImageUri: String
  description: String
  eventId: String
  id: String
  link: String
  logoImageUri: String
  metadata: JSON
  name: String!
  perks: String
  updatedAt: DateTime
}

input SponsorCreateNestedManyWithoutEventInput {
  connect: [SponsorWhereUniqueInput!]
  connectOrCreate: [SponsorCreateOrConnectWithoutEventInput!]
  create: [SponsorCreateWithoutEventInput!]
  createMany: SponsorCreateManyEventInputEnvelope
}

input SponsorCreateOrConnectWithoutEventInput {
  create: SponsorCreateWithoutEventInput!
  where: SponsorWhereUniqueInput!
}

input SponsorCreateWithoutEventInput {
  amount: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  darkLogoImageUri: String
  description: String
  id: String
  link: String
  logoImageUri: String
  metadata: JSON
  name: String!
  perks: String
  updatedAt: DateTime
}

type SponsorGroupBy {
  _avg: SponsorAvgAggregate
  _count: SponsorCountAggregate
  _max: SponsorMaxAggregate
  _min: SponsorMinAggregate
  _sum: SponsorSumAggregate
  amount: Int!
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime!
  darkLogoImageUri: String
  description: String
  eventId: String
  id: String!
  link: String
  logoImageUri: String
  metadata: JSON
  name: String!
  perks: String
  updatedAt: DateTime!
}

input SponsorListRelationFilter {
  every: SponsorWhereInput
  none: SponsorWhereInput
  some: SponsorWhereInput
}

type SponsorMaxAggregate {
  amount: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  darkLogoImageUri: String
  description: String
  eventId: String
  id: String
  link: String
  logoImageUri: String
  name: String
  perks: String
  updatedAt: DateTime
}

input SponsorMaxOrderByAggregateInput {
  amount: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  darkLogoImageUri: SortOrder
  description: SortOrder
  eventId: SortOrder
  id: SortOrder
  link: SortOrder
  logoImageUri: SortOrder
  name: SortOrder
  perks: SortOrder
  updatedAt: SortOrder
}

type SponsorMinAggregate {
  amount: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  darkLogoImageUri: String
  description: String
  eventId: String
  id: String
  link: String
  logoImageUri: String
  name: String
  perks: String
  updatedAt: DateTime
}

input SponsorMinOrderByAggregateInput {
  amount: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  darkLogoImageUri: SortOrder
  description: SortOrder
  eventId: SortOrder
  id: SortOrder
  link: SortOrder
  logoImageUri: SortOrder
  name: SortOrder
  perks: SortOrder
  updatedAt: SortOrder
}

input SponsorOrderByRelationAggregateInput {
  _count: SortOrder
}

input SponsorOrderByWithAggregationInput {
  _avg: SponsorAvgOrderByAggregateInput
  _count: SponsorCountOrderByAggregateInput
  _max: SponsorMaxOrderByAggregateInput
  _min: SponsorMinOrderByAggregateInput
  _sum: SponsorSumOrderByAggregateInput
  amount: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  darkLogoImageUri: SortOrder
  description: SortOrder
  eventId: SortOrder
  id: SortOrder
  link: SortOrder
  logoImageUri: SortOrder
  metadata: SortOrder
  name: SortOrder
  perks: SortOrder
  updatedAt: SortOrder
}

input SponsorOrderByWithRelationInput {
  amount: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  darkLogoImageUri: SortOrder
  description: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  link: SortOrder
  logoImageUri: SortOrder
  metadata: SortOrder
  name: SortOrder
  perks: SortOrder
  updatedAt: SortOrder
}

enum SponsorScalarFieldEnum {
  amount
  contactEmail
  contactName
  contactPhone
  createdAt
  darkLogoImageUri
  description
  eventId
  id
  link
  logoImageUri
  metadata
  name
  perks
  updatedAt
}

input SponsorScalarWhereInput {
  AND: [SponsorScalarWhereInput!]
  NOT: [SponsorScalarWhereInput!]
  OR: [SponsorScalarWhereInput!]
  amount: IntFilter
  contactEmail: StringNullableFilter
  contactName: StringNullableFilter
  contactPhone: StringNullableFilter
  createdAt: DateTimeFilter
  darkLogoImageUri: StringNullableFilter
  description: StringNullableFilter
  eventId: StringNullableFilter
  id: StringFilter
  link: StringNullableFilter
  logoImageUri: StringNullableFilter
  metadata: JsonNullableFilter
  name: StringFilter
  perks: StringNullableFilter
  updatedAt: DateTimeFilter
}

input SponsorScalarWhereWithAggregatesInput {
  AND: [SponsorScalarWhereWithAggregatesInput!]
  NOT: [SponsorScalarWhereWithAggregatesInput!]
  OR: [SponsorScalarWhereWithAggregatesInput!]
  amount: IntWithAggregatesFilter
  contactEmail: StringNullableWithAggregatesFilter
  contactName: StringNullableWithAggregatesFilter
  contactPhone: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  darkLogoImageUri: StringNullableWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  eventId: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  link: StringNullableWithAggregatesFilter
  logoImageUri: StringNullableWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  perks: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type SponsorSumAggregate {
  amount: Int
}

input SponsorSumOrderByAggregateInput {
  amount: SortOrder
}

input SponsorUpdateInput {
  amount: IntFieldUpdateOperationsInput
  contactEmail: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  contactPhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  darkLogoImageUri: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  event: EventUpdateOneWithoutSponsorsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  logoImageUri: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  perks: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SponsorUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
  contactEmail: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  contactPhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  darkLogoImageUri: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  logoImageUri: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  perks: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SponsorUpdateManyWithWhereWithoutEventInput {
  data: SponsorUpdateManyMutationInput!
  where: SponsorScalarWhereInput!
}

input SponsorUpdateManyWithoutEventInput {
  connect: [SponsorWhereUniqueInput!]
  connectOrCreate: [SponsorCreateOrConnectWithoutEventInput!]
  create: [SponsorCreateWithoutEventInput!]
  createMany: SponsorCreateManyEventInputEnvelope
  delete: [SponsorWhereUniqueInput!]
  deleteMany: [SponsorScalarWhereInput!]
  disconnect: [SponsorWhereUniqueInput!]
  set: [SponsorWhereUniqueInput!]
  update: [SponsorUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [SponsorUpdateManyWithWhereWithoutEventInput!]
  upsert: [SponsorUpsertWithWhereUniqueWithoutEventInput!]
}

input SponsorUpdateWithWhereUniqueWithoutEventInput {
  data: SponsorUpdateWithoutEventInput!
  where: SponsorWhereUniqueInput!
}

input SponsorUpdateWithoutEventInput {
  amount: IntFieldUpdateOperationsInput
  contactEmail: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  contactPhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  darkLogoImageUri: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  logoImageUri: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  perks: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SponsorUpsertWithWhereUniqueWithoutEventInput {
  create: SponsorCreateWithoutEventInput!
  update: SponsorUpdateWithoutEventInput!
  where: SponsorWhereUniqueInput!
}

input SponsorWhereInput {
  AND: [SponsorWhereInput!]
  NOT: [SponsorWhereInput!]
  OR: [SponsorWhereInput!]
  amount: IntFilter
  contactEmail: StringNullableFilter
  contactName: StringNullableFilter
  contactPhone: StringNullableFilter
  createdAt: DateTimeFilter
  darkLogoImageUri: StringNullableFilter
  description: StringNullableFilter
  event: EventRelationFilter
  eventId: StringNullableFilter
  id: StringFilter
  link: StringNullableFilter
  logoImageUri: StringNullableFilter
  metadata: JsonNullableFilter
  name: StringFilter
  perks: StringNullableFilter
  updatedAt: DateTimeFilter
}

input SponsorWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Ticket {
  _count: TicketCount
  age: Int
  couponCode: String
  createdAt: DateTime!
  email: String
  event: Event!
  eventId: String!
  firstName: String!
  getMetadata(key: String!): String
  guardian: Person
  id: String!
  lastName: String!
  needsGuardian: Boolean!
  payment: Payment
  paymentId: String
  personId: String
  phone: String
  promoCode: PromoCode
  promoCodeId: String
  sentEmails(cursor: EmailTemplateWhereUniqueInput, distinct: [EmailTemplateScalarFieldEnum!], orderBy: [EmailTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: EmailTemplateWhereInput): [EmailTemplate!]!
  type: TicketType!
  updatedAt: DateTime!
  waiverSigned: Boolean!
}

type TicketAvgAggregate {
  age: Float
}

input TicketAvgOrderByAggregateInput {
  age: SortOrder
}

type TicketCount {
  sentEmails: Int!
}

type TicketCountAggregate {
  _all: Int!
  age: Int!
  couponCode: Int!
  createdAt: Int!
  email: Int!
  eventId: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  metadata: Int!
  paymentId: Int!
  personId: Int!
  phone: Int!
  promoCodeId: Int!
  type: Int!
  updatedAt: Int!
  waiverSigned: Int!
}

input TicketCountOrderByAggregateInput {
  age: SortOrder
  couponCode: SortOrder
  createdAt: SortOrder
  email: SortOrder
  eventId: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  metadata: SortOrder
  paymentId: SortOrder
  personId: SortOrder
  phone: SortOrder
  promoCodeId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  waiverSigned: SortOrder
}

input TicketCreateInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  event: EventCreateNestedOneWithoutTicketsInput!
  firstName: String!
  guardian: PersonCreateNestedOneWithoutTicketInput
  id: String
  lastName: String!
  metadata: JSON
  payment: PaymentCreateNestedOneWithoutTicketsInput
  phone: String
  promoCode: PromoCodeCreateNestedOneWithoutTicketsInput
  sentEmails: EmailTemplateCreateNestedManyWithoutSentToInput
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateManyEventInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  paymentId: String
  personId: String
  phone: String
  promoCodeId: String
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateManyEventInputEnvelope {
  data: [TicketCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input TicketCreateManyGuardianInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  eventId: String!
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  paymentId: String
  phone: String
  promoCodeId: String
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateManyGuardianInputEnvelope {
  data: [TicketCreateManyGuardianInput!]!
  skipDuplicates: Boolean
}

input TicketCreateManyInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  eventId: String!
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  paymentId: String
  personId: String
  phone: String
  promoCodeId: String
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateManyPaymentInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  eventId: String!
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  personId: String
  phone: String
  promoCodeId: String
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateManyPaymentInputEnvelope {
  data: [TicketCreateManyPaymentInput!]!
  skipDuplicates: Boolean
}

input TicketCreateManyPromoCodeInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  eventId: String!
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  paymentId: String
  personId: String
  phone: String
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateManyPromoCodeInputEnvelope {
  data: [TicketCreateManyPromoCodeInput!]!
  skipDuplicates: Boolean
}

input TicketCreateNestedManyWithoutEventInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutEventInput!]
  create: [TicketCreateWithoutEventInput!]
  createMany: TicketCreateManyEventInputEnvelope
}

input TicketCreateNestedManyWithoutGuardianInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutGuardianInput!]
  create: [TicketCreateWithoutGuardianInput!]
  createMany: TicketCreateManyGuardianInputEnvelope
}

input TicketCreateNestedManyWithoutPaymentInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutPaymentInput!]
  create: [TicketCreateWithoutPaymentInput!]
  createMany: TicketCreateManyPaymentInputEnvelope
}

input TicketCreateNestedManyWithoutPromoCodeInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutPromoCodeInput!]
  create: [TicketCreateWithoutPromoCodeInput!]
  createMany: TicketCreateManyPromoCodeInputEnvelope
}

input TicketCreateNestedManyWithoutSentEmailsInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutSentEmailsInput!]
  create: [TicketCreateWithoutSentEmailsInput!]
}

input TicketCreateOrConnectWithoutEventInput {
  create: TicketCreateWithoutEventInput!
  where: TicketWhereUniqueInput!
}

input TicketCreateOrConnectWithoutGuardianInput {
  create: TicketCreateWithoutGuardianInput!
  where: TicketWhereUniqueInput!
}

input TicketCreateOrConnectWithoutPaymentInput {
  create: TicketCreateWithoutPaymentInput!
  where: TicketWhereUniqueInput!
}

input TicketCreateOrConnectWithoutPromoCodeInput {
  create: TicketCreateWithoutPromoCodeInput!
  where: TicketWhereUniqueInput!
}

input TicketCreateOrConnectWithoutSentEmailsInput {
  create: TicketCreateWithoutSentEmailsInput!
  where: TicketWhereUniqueInput!
}

input TicketCreateWithoutEventInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  firstName: String!
  guardian: PersonCreateNestedOneWithoutTicketInput
  id: String
  lastName: String!
  metadata: JSON
  payment: PaymentCreateNestedOneWithoutTicketsInput
  phone: String
  promoCode: PromoCodeCreateNestedOneWithoutTicketsInput
  sentEmails: EmailTemplateCreateNestedManyWithoutSentToInput
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateWithoutGuardianInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  event: EventCreateNestedOneWithoutTicketsInput!
  firstName: String!
  id: String
  lastName: String!
  metadata: JSON
  payment: PaymentCreateNestedOneWithoutTicketsInput
  phone: String
  promoCode: PromoCodeCreateNestedOneWithoutTicketsInput
  sentEmails: EmailTemplateCreateNestedManyWithoutSentToInput
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateWithoutPaymentInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  event: EventCreateNestedOneWithoutTicketsInput!
  firstName: String!
  guardian: PersonCreateNestedOneWithoutTicketInput
  id: String
  lastName: String!
  metadata: JSON
  phone: String
  promoCode: PromoCodeCreateNestedOneWithoutTicketsInput
  sentEmails: EmailTemplateCreateNestedManyWithoutSentToInput
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateWithoutPromoCodeInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  event: EventCreateNestedOneWithoutTicketsInput!
  firstName: String!
  guardian: PersonCreateNestedOneWithoutTicketInput
  id: String
  lastName: String!
  metadata: JSON
  payment: PaymentCreateNestedOneWithoutTicketsInput
  phone: String
  sentEmails: EmailTemplateCreateNestedManyWithoutSentToInput
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketCreateWithoutSentEmailsInput {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  event: EventCreateNestedOneWithoutTicketsInput!
  firstName: String!
  guardian: PersonCreateNestedOneWithoutTicketInput
  id: String
  lastName: String!
  metadata: JSON
  payment: PaymentCreateNestedOneWithoutTicketsInput
  phone: String
  promoCode: PromoCodeCreateNestedOneWithoutTicketsInput
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

type TicketGroupBy {
  _avg: TicketAvgAggregate
  _count: TicketCountAggregate
  _max: TicketMaxAggregate
  _min: TicketMinAggregate
  _sum: TicketSumAggregate
  age: Int
  couponCode: String
  createdAt: DateTime!
  email: String
  eventId: String!
  firstName: String!
  id: String!
  lastName: String!
  metadata: JSON
  paymentId: String
  personId: String
  phone: String
  promoCodeId: String
  type: TicketType!
  updatedAt: DateTime!
  waiverSigned: Boolean!
}

input TicketListRelationFilter {
  every: TicketWhereInput
  none: TicketWhereInput
  some: TicketWhereInput
}

type TicketMaxAggregate {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  eventId: String
  firstName: String
  id: String
  lastName: String
  paymentId: String
  personId: String
  phone: String
  promoCodeId: String
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketMaxOrderByAggregateInput {
  age: SortOrder
  couponCode: SortOrder
  createdAt: SortOrder
  email: SortOrder
  eventId: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  paymentId: SortOrder
  personId: SortOrder
  phone: SortOrder
  promoCodeId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  waiverSigned: SortOrder
}

type TicketMinAggregate {
  age: Int
  couponCode: String
  createdAt: DateTime
  email: String
  eventId: String
  firstName: String
  id: String
  lastName: String
  paymentId: String
  personId: String
  phone: String
  promoCodeId: String
  type: TicketType
  updatedAt: DateTime
  waiverSigned: Boolean
}

input TicketMinOrderByAggregateInput {
  age: SortOrder
  couponCode: SortOrder
  createdAt: SortOrder
  email: SortOrder
  eventId: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  paymentId: SortOrder
  personId: SortOrder
  phone: SortOrder
  promoCodeId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  waiverSigned: SortOrder
}

input TicketOrderByRelationAggregateInput {
  _count: SortOrder
}

input TicketOrderByWithAggregationInput {
  _avg: TicketAvgOrderByAggregateInput
  _count: TicketCountOrderByAggregateInput
  _max: TicketMaxOrderByAggregateInput
  _min: TicketMinOrderByAggregateInput
  _sum: TicketSumOrderByAggregateInput
  age: SortOrder
  couponCode: SortOrder
  createdAt: SortOrder
  email: SortOrder
  eventId: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  metadata: SortOrder
  paymentId: SortOrder
  personId: SortOrder
  phone: SortOrder
  promoCodeId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  waiverSigned: SortOrder
}

input TicketOrderByWithRelationInput {
  age: SortOrder
  couponCode: SortOrder
  createdAt: SortOrder
  email: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  firstName: SortOrder
  guardian: PersonOrderByWithRelationInput
  id: SortOrder
  lastName: SortOrder
  metadata: SortOrder
  payment: PaymentOrderByWithRelationInput
  paymentId: SortOrder
  personId: SortOrder
  phone: SortOrder
  promoCode: PromoCodeOrderByWithRelationInput
  promoCodeId: SortOrder
  sentEmails: EmailTemplateOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
  waiverSigned: SortOrder
}

enum TicketScalarFieldEnum {
  age
  couponCode
  createdAt
  email
  eventId
  firstName
  id
  lastName
  metadata
  paymentId
  personId
  phone
  promoCodeId
  type
  updatedAt
  waiverSigned
}

input TicketScalarWhereInput {
  AND: [TicketScalarWhereInput!]
  NOT: [TicketScalarWhereInput!]
  OR: [TicketScalarWhereInput!]
  age: IntNullableFilter
  couponCode: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  eventId: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  metadata: JsonNullableFilter
  paymentId: StringNullableFilter
  personId: StringNullableFilter
  phone: StringNullableFilter
  promoCodeId: StringNullableFilter
  type: EnumTicketTypeFilter
  updatedAt: DateTimeFilter
  waiverSigned: BoolFilter
}

input TicketScalarWhereWithAggregatesInput {
  AND: [TicketScalarWhereWithAggregatesInput!]
  NOT: [TicketScalarWhereWithAggregatesInput!]
  OR: [TicketScalarWhereWithAggregatesInput!]
  age: IntNullableWithAggregatesFilter
  couponCode: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  eventId: StringWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  paymentId: StringNullableWithAggregatesFilter
  personId: StringNullableWithAggregatesFilter
  phone: StringNullableWithAggregatesFilter
  promoCodeId: StringNullableWithAggregatesFilter
  type: EnumTicketTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  waiverSigned: BoolWithAggregatesFilter
}

type TicketSumAggregate {
  age: Int
}

input TicketSumOrderByAggregateInput {
  age: SortOrder
}

enum TicketType {
  JUDGE
  MENTOR
  STAFF
  STUDENT
  TEACHER
  VIP
}

input TicketUpdateInput {
  age: NullableIntFieldUpdateOperationsInput
  couponCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutTicketsInput
  firstName: StringFieldUpdateOperationsInput
  guardian: PersonUpdateOneWithoutTicketInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  payment: PaymentUpdateOneWithoutTicketsInput
  phone: NullableStringFieldUpdateOperationsInput
  promoCode: PromoCodeUpdateOneWithoutTicketsInput
  sentEmails: EmailTemplateUpdateManyWithoutSentToInput
  type: EnumTicketTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waiverSigned: BoolFieldUpdateOperationsInput
}

input TicketUpdateManyMutationInput {
  age: NullableIntFieldUpdateOperationsInput
  couponCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  phone: NullableStringFieldUpdateOperationsInput
  type: EnumTicketTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waiverSigned: BoolFieldUpdateOperationsInput
}

input TicketUpdateManyWithWhereWithoutEventInput {
  data: TicketUpdateManyMutationInput!
  where: TicketScalarWhereInput!
}

input TicketUpdateManyWithWhereWithoutGuardianInput {
  data: TicketUpdateManyMutationInput!
  where: TicketScalarWhereInput!
}

input TicketUpdateManyWithWhereWithoutPaymentInput {
  data: TicketUpdateManyMutationInput!
  where: TicketScalarWhereInput!
}

input TicketUpdateManyWithWhereWithoutPromoCodeInput {
  data: TicketUpdateManyMutationInput!
  where: TicketScalarWhereInput!
}

input TicketUpdateManyWithWhereWithoutSentEmailsInput {
  data: TicketUpdateManyMutationInput!
  where: TicketScalarWhereInput!
}

input TicketUpdateManyWithoutEventInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutEventInput!]
  create: [TicketCreateWithoutEventInput!]
  createMany: TicketCreateManyEventInputEnvelope
  delete: [TicketWhereUniqueInput!]
  deleteMany: [TicketScalarWhereInput!]
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  update: [TicketUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [TicketUpdateManyWithWhereWithoutEventInput!]
  upsert: [TicketUpsertWithWhereUniqueWithoutEventInput!]
}

input TicketUpdateManyWithoutGuardianInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutGuardianInput!]
  create: [TicketCreateWithoutGuardianInput!]
  createMany: TicketCreateManyGuardianInputEnvelope
  delete: [TicketWhereUniqueInput!]
  deleteMany: [TicketScalarWhereInput!]
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  update: [TicketUpdateWithWhereUniqueWithoutGuardianInput!]
  updateMany: [TicketUpdateManyWithWhereWithoutGuardianInput!]
  upsert: [TicketUpsertWithWhereUniqueWithoutGuardianInput!]
}

input TicketUpdateManyWithoutPaymentInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutPaymentInput!]
  create: [TicketCreateWithoutPaymentInput!]
  createMany: TicketCreateManyPaymentInputEnvelope
  delete: [TicketWhereUniqueInput!]
  deleteMany: [TicketScalarWhereInput!]
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  update: [TicketUpdateWithWhereUniqueWithoutPaymentInput!]
  updateMany: [TicketUpdateManyWithWhereWithoutPaymentInput!]
  upsert: [TicketUpsertWithWhereUniqueWithoutPaymentInput!]
}

input TicketUpdateManyWithoutPromoCodeInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutPromoCodeInput!]
  create: [TicketCreateWithoutPromoCodeInput!]
  createMany: TicketCreateManyPromoCodeInputEnvelope
  delete: [TicketWhereUniqueInput!]
  deleteMany: [TicketScalarWhereInput!]
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  update: [TicketUpdateWithWhereUniqueWithoutPromoCodeInput!]
  updateMany: [TicketUpdateManyWithWhereWithoutPromoCodeInput!]
  upsert: [TicketUpsertWithWhereUniqueWithoutPromoCodeInput!]
}

input TicketUpdateManyWithoutSentEmailsInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutSentEmailsInput!]
  create: [TicketCreateWithoutSentEmailsInput!]
  delete: [TicketWhereUniqueInput!]
  deleteMany: [TicketScalarWhereInput!]
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  update: [TicketUpdateWithWhereUniqueWithoutSentEmailsInput!]
  updateMany: [TicketUpdateManyWithWhereWithoutSentEmailsInput!]
  upsert: [TicketUpsertWithWhereUniqueWithoutSentEmailsInput!]
}

input TicketUpdateWithWhereUniqueWithoutEventInput {
  data: TicketUpdateWithoutEventInput!
  where: TicketWhereUniqueInput!
}

input TicketUpdateWithWhereUniqueWithoutGuardianInput {
  data: TicketUpdateWithoutGuardianInput!
  where: TicketWhereUniqueInput!
}

input TicketUpdateWithWhereUniqueWithoutPaymentInput {
  data: TicketUpdateWithoutPaymentInput!
  where: TicketWhereUniqueInput!
}

input TicketUpdateWithWhereUniqueWithoutPromoCodeInput {
  data: TicketUpdateWithoutPromoCodeInput!
  where: TicketWhereUniqueInput!
}

input TicketUpdateWithWhereUniqueWithoutSentEmailsInput {
  data: TicketUpdateWithoutSentEmailsInput!
  where: TicketWhereUniqueInput!
}

input TicketUpdateWithoutEventInput {
  age: NullableIntFieldUpdateOperationsInput
  couponCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  guardian: PersonUpdateOneWithoutTicketInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  payment: PaymentUpdateOneWithoutTicketsInput
  phone: NullableStringFieldUpdateOperationsInput
  promoCode: PromoCodeUpdateOneWithoutTicketsInput
  sentEmails: EmailTemplateUpdateManyWithoutSentToInput
  type: EnumTicketTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waiverSigned: BoolFieldUpdateOperationsInput
}

input TicketUpdateWithoutGuardianInput {
  age: NullableIntFieldUpdateOperationsInput
  couponCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutTicketsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  payment: PaymentUpdateOneWithoutTicketsInput
  phone: NullableStringFieldUpdateOperationsInput
  promoCode: PromoCodeUpdateOneWithoutTicketsInput
  sentEmails: EmailTemplateUpdateManyWithoutSentToInput
  type: EnumTicketTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waiverSigned: BoolFieldUpdateOperationsInput
}

input TicketUpdateWithoutPaymentInput {
  age: NullableIntFieldUpdateOperationsInput
  couponCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutTicketsInput
  firstName: StringFieldUpdateOperationsInput
  guardian: PersonUpdateOneWithoutTicketInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  phone: NullableStringFieldUpdateOperationsInput
  promoCode: PromoCodeUpdateOneWithoutTicketsInput
  sentEmails: EmailTemplateUpdateManyWithoutSentToInput
  type: EnumTicketTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waiverSigned: BoolFieldUpdateOperationsInput
}

input TicketUpdateWithoutPromoCodeInput {
  age: NullableIntFieldUpdateOperationsInput
  couponCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutTicketsInput
  firstName: StringFieldUpdateOperationsInput
  guardian: PersonUpdateOneWithoutTicketInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  payment: PaymentUpdateOneWithoutTicketsInput
  phone: NullableStringFieldUpdateOperationsInput
  sentEmails: EmailTemplateUpdateManyWithoutSentToInput
  type: EnumTicketTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waiverSigned: BoolFieldUpdateOperationsInput
}

input TicketUpdateWithoutSentEmailsInput {
  age: NullableIntFieldUpdateOperationsInput
  couponCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutTicketsInput
  firstName: StringFieldUpdateOperationsInput
  guardian: PersonUpdateOneWithoutTicketInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  metadata: JSON
  payment: PaymentUpdateOneWithoutTicketsInput
  phone: NullableStringFieldUpdateOperationsInput
  promoCode: PromoCodeUpdateOneWithoutTicketsInput
  type: EnumTicketTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waiverSigned: BoolFieldUpdateOperationsInput
}

input TicketUpsertWithWhereUniqueWithoutEventInput {
  create: TicketCreateWithoutEventInput!
  update: TicketUpdateWithoutEventInput!
  where: TicketWhereUniqueInput!
}

input TicketUpsertWithWhereUniqueWithoutGuardianInput {
  create: TicketCreateWithoutGuardianInput!
  update: TicketUpdateWithoutGuardianInput!
  where: TicketWhereUniqueInput!
}

input TicketUpsertWithWhereUniqueWithoutPaymentInput {
  create: TicketCreateWithoutPaymentInput!
  update: TicketUpdateWithoutPaymentInput!
  where: TicketWhereUniqueInput!
}

input TicketUpsertWithWhereUniqueWithoutPromoCodeInput {
  create: TicketCreateWithoutPromoCodeInput!
  update: TicketUpdateWithoutPromoCodeInput!
  where: TicketWhereUniqueInput!
}

input TicketUpsertWithWhereUniqueWithoutSentEmailsInput {
  create: TicketCreateWithoutSentEmailsInput!
  update: TicketUpdateWithoutSentEmailsInput!
  where: TicketWhereUniqueInput!
}

input TicketWhereInput {
  AND: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  age: IntNullableFilter
  couponCode: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  event: EventRelationFilter
  eventId: StringFilter
  firstName: StringFilter
  guardian: PersonRelationFilter
  id: StringFilter
  lastName: StringFilter
  metadata: JsonNullableFilter
  payment: PaymentRelationFilter
  paymentId: StringNullableFilter
  personId: StringNullableFilter
  phone: StringNullableFilter
  promoCode: PromoCodeRelationFilter
  promoCodeId: StringNullableFilter
  sentEmails: EmailTemplateListRelationFilter
  type: EnumTicketTypeFilter
  updatedAt: DateTimeFilter
  waiverSigned: BoolFilter
}

input TicketWhereUniqueInput {
  id: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Venue {
  _count: VenueCount
  address: String
  addressLine1: String
  capacity: Int
  city: String
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime!
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  getMetadata(key: String!): String
  id: String!
  mapLink: String
  name: String!
  state: String
  stateAbbreviation: String
  updatedAt: DateTime!
  zipCode: String
}

type VenueAvgAggregate {
  capacity: Float
}

input VenueAvgOrderByAggregateInput {
  capacity: SortOrder
}

type VenueCount {
  events: Int!
}

type VenueCountAggregate {
  _all: Int!
  address: Int!
  capacity: Int!
  contactEmail: Int!
  contactName: Int!
  contactPhone: Int!
  createdAt: Int!
  id: Int!
  mapLink: Int!
  metadata: Int!
  name: Int!
  updatedAt: Int!
}

input VenueCountOrderByAggregateInput {
  address: SortOrder
  capacity: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  id: SortOrder
  mapLink: SortOrder
  metadata: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input VenueCreateInput {
  address: String
  capacity: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  events: EventCreateNestedManyWithoutVenueInput
  id: String
  mapLink: String
  metadata: JSON
  name: String!
  updatedAt: DateTime
}

input VenueCreateManyInput {
  address: String
  capacity: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  id: String
  mapLink: String
  metadata: JSON
  name: String!
  updatedAt: DateTime
}

input VenueCreateNestedOneWithoutEventsInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutEventsInput
  create: VenueCreateWithoutEventsInput
}

input VenueCreateOrConnectWithoutEventsInput {
  create: VenueCreateWithoutEventsInput!
  where: VenueWhereUniqueInput!
}

input VenueCreateWithoutEventsInput {
  address: String
  capacity: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  id: String
  mapLink: String
  metadata: JSON
  name: String!
  updatedAt: DateTime
}

type VenueGroupBy {
  _avg: VenueAvgAggregate
  _count: VenueCountAggregate
  _max: VenueMaxAggregate
  _min: VenueMinAggregate
  _sum: VenueSumAggregate
  address: String
  capacity: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime!
  id: String!
  mapLink: String
  metadata: JSON
  name: String!
  updatedAt: DateTime!
}

type VenueMaxAggregate {
  address: String
  capacity: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  id: String
  mapLink: String
  name: String
  updatedAt: DateTime
}

input VenueMaxOrderByAggregateInput {
  address: SortOrder
  capacity: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  id: SortOrder
  mapLink: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type VenueMinAggregate {
  address: String
  capacity: Int
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt: DateTime
  id: String
  mapLink: String
  name: String
  updatedAt: DateTime
}

input VenueMinOrderByAggregateInput {
  address: SortOrder
  capacity: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  id: SortOrder
  mapLink: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input VenueOrderByWithAggregationInput {
  _avg: VenueAvgOrderByAggregateInput
  _count: VenueCountOrderByAggregateInput
  _max: VenueMaxOrderByAggregateInput
  _min: VenueMinOrderByAggregateInput
  _sum: VenueSumOrderByAggregateInput
  address: SortOrder
  capacity: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  id: SortOrder
  mapLink: SortOrder
  metadata: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input VenueOrderByWithRelationInput {
  address: SortOrder
  capacity: SortOrder
  contactEmail: SortOrder
  contactName: SortOrder
  contactPhone: SortOrder
  createdAt: SortOrder
  events: EventOrderByRelationAggregateInput
  id: SortOrder
  mapLink: SortOrder
  metadata: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input VenueRelationFilter {
  is: VenueWhereInput
  isNot: VenueWhereInput
}

enum VenueScalarFieldEnum {
  address
  capacity
  contactEmail
  contactName
  contactPhone
  createdAt
  id
  mapLink
  metadata
  name
  updatedAt
}

input VenueScalarWhereWithAggregatesInput {
  AND: [VenueScalarWhereWithAggregatesInput!]
  NOT: [VenueScalarWhereWithAggregatesInput!]
  OR: [VenueScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  capacity: IntNullableWithAggregatesFilter
  contactEmail: StringNullableWithAggregatesFilter
  contactName: StringNullableWithAggregatesFilter
  contactPhone: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  mapLink: StringNullableWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type VenueSumAggregate {
  capacity: Int
}

input VenueSumOrderByAggregateInput {
  capacity: SortOrder
}

input VenueUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  contactEmail: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  contactPhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  events: EventUpdateManyWithoutVenueInput
  id: StringFieldUpdateOperationsInput
  mapLink: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  contactEmail: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  contactPhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mapLink: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateOneWithoutEventsInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutEventsInput
  create: VenueCreateWithoutEventsInput
  delete: Boolean
  disconnect: Boolean
  update: VenueUpdateWithoutEventsInput
  upsert: VenueUpsertWithoutEventsInput
}

input VenueUpdateWithoutEventsInput {
  address: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  contactEmail: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  contactPhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mapLink: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpsertWithoutEventsInput {
  create: VenueCreateWithoutEventsInput!
  update: VenueUpdateWithoutEventsInput!
}

input VenueWhereInput {
  AND: [VenueWhereInput!]
  NOT: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  address: StringNullableFilter
  capacity: IntNullableFilter
  contactEmail: StringNullableFilter
  contactName: StringNullableFilter
  contactPhone: StringNullableFilter
  createdAt: DateTimeFilter
  events: EventListRelationFilter
  id: StringFilter
  mapLink: StringNullableFilter
  metadata: JsonNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input VenueWhereUniqueInput {
  id: String
}
